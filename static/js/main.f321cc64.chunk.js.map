{"version":3,"sources":["enums/Months.ts","view/createOrUpdateReminderModal/StyledCreateOrUpdateReminderModal.tsx","domain/Reminder.ts","helpers/getTenYears.ts","view/shared/SelectYear.tsx","helpers/getKeysFromEnum.ts","view/shared/SelectMonth.tsx","view/shared/SelectHours.tsx","view/shared/SelectMinutes.tsx","view/createOrUpdateReminderModal/StyledForm.tsx","view/shared/SelectColor.tsx","infra/WeatherRepository.tsx","application/getForecast.tsx","view/shared/AutocompletePlaces.tsx","enums/DaysOfWeek.ts","view/shared/SelectDay.tsx","view/createOrUpdateReminderModal/CreateOrUpdateReminderModal.tsx","view/calendar/CalendarHeader.tsx/StyledCalendarHeader.tsx","view/calendar/CalendarHeader.tsx/CalendarHeader.tsx","view/calendar/StyledCalendar.tsx","view/calendar/Day/StyledDay.tsx","view/calendar/Day/Day.tsx","view/calendar/Week/StyledWeek.tsx","view/calendar/Week/Week.tsx","view/calendar/Calendar.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Months","StyledCreateOrUpdateReminderModal","styled","div","ALL_COLORS","Reminder","reminder","id","description","date","color","city","this","uuidv4","getTenYears","currentYear","years","index","push","SelectYear","label","onChange","InputLabel","Select","value","getYear","event","target","Date","map","year","MenuItem","getKeysFromEnum","e","Object","keys","filter","key","SelectMonth","months","month","getMonth","Number","hoursInADay","hours","SelectHour","isToday","isSameDay","getHours","hour","disabled","minutesInAnHour","SelectMinutes","isNow","getMinutes","minutes","StyledForm","form","StyledColor","Color","checked","className","onClick","Icon","style","fontSize","StyledSelectColor","SelectColor","WeatherRepository","getForecast","count","a","fetch","encodeURIComponent","response","json","days","cod","list","cnt","weather","DaysOfWeek","autocompleteService","current","useStyles","makeStyles","theme","icon","palette","text","secondary","marginRight","spacing","AutoCompletePlaces","onSelect","initialValue","classes","React","useState","setValue","inputValue","setInputValue","options","setOptions","loaded","useRef","window","document","querySelector","src","position","script","createElement","setAttribute","appendChild","loadScript","useMemo","throttle","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","input","results","newOptions","Autocomplete","getOptionLabel","option","filterOptions","x","autoComplete","includeInputInList","filterSelectedOptions","newValue","onInputChange","newInputValue","renderInput","params","TextField","renderOption","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","match","offset","length","Grid","container","alignItems","item","xs","part","fontWeight","highlight","Typography","variant","secondary_text","daysOnMonth","daysQty","getDate","endOfMonth","SelectDay","isCurrentMonth","day","CreateOrUpdateReminderModal","open","onClose","initialDate","reminderState","setReminderState","weatherCode","setWeatherCode","handleChangeDate","fn","oldState","handleChangeProperty","property","invalidForm","updateForecast","cityName","eachDayOfInterval","start","format","end","newWeatherCode","Dialog","Container","aria-label","noValidate","FormControl","error","helperText","setYear","setMonth","setDate","setHours","setMinutes","place","gutterBottom","Button","StyledCalendarHeader","CalendarHeader","onNext","onPrevious","StyledCalendar","StyledDay","Day","StyledWeek","Week","initDate","addDays","getDays","StyledWeekDaysIndicator","WeekDaysIndicator","dayName","substr","Calendar","dateVisible","setDateVisible","firstDayOfEachWeek","setFirstDayOfEachWeek","startOfWeek","startOfMonth","isSameMonth","getFirstDayOfEachWeek","currentState","addMonths","App","reminderModalIsOpen","setReminderModalIsOpen","modalInitialDate","setModalInitialDate","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f321cc64.chunk.js","sourcesContent":["enum Months {\n    January = 1,\n    February,\n    March,\n    April,\n    May,\n    June,\n    July,\n    August,\n    September,\n    October,\n    November,\n    December\n}\n\nexport default Months;","import styled from 'styled-components';\n\nconst StyledCreateOrUpdateReminderModal = styled.div`\n    position: 'absolute';\n    outline: 0;\n    background-color: #FFF;\n    padding: 25px 15px;\n\n    .close {\n        font-size: 18px;\n        font-weight: 900;\n        position: absolute;\n        border: none;\n        background: none;\n        right: 5px;\n        top: 8px;\n        cursor: pointer;\n    }\n\n    @media screen and (min-width: 767px) {\n        padding: 35px 15px;\n    }\n`;\n\nexport default StyledCreateOrUpdateReminderModal;","import { v4 as uuidv4 } from 'uuid';\nimport IPlace from './Place';\n\nexport const ALL_COLORS = [\n    \"rgb(235, 90, 70)\",\n    \"rgb(235, 90, 0)\",\n    \"rgb(97, 189, 79)\",\n    \"rgb(242, 214, 0)\",\n    \"rgb(255, 159, 26)\",\n    \"rgb(235, 30, 10)\",\n    \"rgb(195, 119, 224)\",\n    \"rgb(0, 121, 191)\",\n    \"rgb(0, 194, 224)\",\n    \"rgb(81, 232, 152)\",\n    \"rgb(255, 120, 203)\",\n    \"rgb(179, 186, 197)\"\n] as const;\n\ntype ColorsTuple = typeof ALL_COLORS;\n\nexport type Colors = ColorsTuple[number];\n\nclass Reminder {\n    id: string;\n    description: string;\n    date: Date;\n    color: Colors;\n    city: IPlace;\n\n    constructor(reminder: Reminder) {\n        this.id = reminder.id || uuidv4();\n        this.description = reminder.description || '';\n        this.date = reminder.date;\n        this.color = reminder.color || ALL_COLORS[0];\n        this.city = reminder.city || {};\n    }\n};\n\nexport default Reminder;","const getTenYears = (currentYear: number): number[] => {\n    let years = [];\n    for (let index = currentYear; index < currentYear + 10; index++) {\n        years.push(index);\n    }\n\n    return years;\n}\n\nexport default getTenYears;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport getYear from 'date-fns/getYear';\nimport getTenYears from '../../helpers/getTenYears';\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void,\n};\n\nconst SelectYear: React.FC<IComponentProps> = ({\n    label,\n    date,\n    onChange,\n}) => (\n    <>\n        <InputLabel>{label}</InputLabel>\n        <Select\n            label={label}\n            value={getYear(date)}\n            onChange={event => onChange(event.target.value as number)}\n        >\n            {getTenYears(getYear(new Date())).map(year => (\n                <MenuItem key={year} value={year}>{year}</MenuItem>\n            ))}\n        </Select>\n    </>\n)\n\nexport default SelectYear;","import Enum from '../domain/Enum';\n\nconst getKeysFromEnum = (e: Enum): number[] => Object.keys(e)\n    .filter(key => typeof e[key as any] === 'number')\n    .map(key => e[key as any] as number);\n\nexport default getKeysFromEnum;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport getMonth from 'date-fns/getMonth';\nimport Enum from '../../domain/Enum';\nimport Months from '../../enums/Months';\nimport getKeysFromEnum from '../../helpers/getKeysFromEnum';\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectMonth: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const months = getKeysFromEnum(Months as Enum)\n        .filter(month => month >= getMonth(new Date()));\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getMonth(date) + 1}\n                onChange={event => onChange((event.target.value as number) - 1)}\n            >\n                {months\n                    .map(month => (\n                        <MenuItem key={month} value={month}>\n                            {Months[Number(month)]}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    )\n};\n\nexport default SelectMonth;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { getHours, isSameDay } from 'date-fns/esm';\n\nconst hoursInADay = ((): number[] => {\n    let hours: number[] = [];\n    for (let index = 1; index < 24; index++) {\n        hours.push(index);\n    }\n    return hours;\n})();\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectHour: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const isToday = isSameDay(date, new Date());\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getHours(date)}\n                onChange={event => onChange(event.target.value as number)}\n            >\n                {hoursInADay\n                    .map(hour => (\n                        <MenuItem\n                            key={hour}\n                            value={hour}\n                            disabled={isToday && hour < getHours(new Date())}\n                        >\n                            {hour}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    );\n};\n\nexport default SelectHour;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { getMinutes, isSameDay } from 'date-fns/esm';\nimport getHours from 'date-fns/getHours';\n\nconst minutesInAnHour = ((): number[] => {\n    let hours: number[] = [];\n    for (let index = 1; index < 60; index++) {\n        hours.push(index);\n    }\n    return hours;\n})();\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectMinutes: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const isNow = isSameDay(date, new Date()) && getHours(date) === getHours(new Date());\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getMinutes(date)}\n                onChange={event => onChange(event.target.value as number)}\n            >\n                {minutesInAnHour\n                    .map(minutes => (\n                        <MenuItem\n                            key={minutes}\n                            value={minutes}\n                            disabled={isNow && minutes < getMinutes(new Date())}\n                        >\n                            {minutes}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    );\n};\n\nexport default SelectMinutes;","import styled from 'styled-components';\n\nconst StyledForm = styled.form`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-row-gap: 25px;\n    grid-column-gap: 25px;\n\n    .description,\n    .year, \n    .city, \n    .select-color, \n    .actions,\n    .forecast {\n        grid-column: 1 / -1;\n    }\n\n    select, .MuiInputBase-root {\n        width: 100%;\n    }\n\n    .actions {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .forecast {\n        display: flex;\n        justify-content: center;\n        caret-color: transparent;\n        background: lightcyan;\n        border-radius: 5px;\n        padding: 20px;\n\n        .icon.wi {\n            color: grey;\n            font-size: 35px;\n        }\n    }\n\n    @media screen and (min-width: 767px) {\n        grid-template-columns: repeat(3, 1fr);\n\n        .year {\n            grid-column: auto;\n        }\n\n        .actions {\n            justify-content: flex-end;\n\n            > :first-child {\n                margin-right: 25px;\n            }\n        }\n    }\n`;\n\nexport default StyledForm;","import { Icon } from '@material-ui/core';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { ALL_COLORS, Colors } from '../../domain/Reminder';\n\ninterface IColorProps {\n    checked: boolean;\n    color: Colors;\n    onChange: (color: string) => void;\n}\n\nconst StyledColor = styled.div`\n    background-color: ${({ color }) => color};\n    width: 40px;\n    height: 40px;\n    border-radius: 5px;\n    position: relative;\n    cursor: pointer;\n    caret-color: transparent;\n\n    .icon {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    @media screen and (min-width: 767px) {\n        height: 55px;\n        width: 55px;\n    }\n`;\n\nconst Color: React.FC<IColorProps> = ({ color, checked, onChange }) => {\n    return (\n        <StyledColor className=\"color\" color={color} onClick={() => onChange(color)}>\n            {checked && (\n                <Icon\n                    className=\"icon\"\n                    style={{ color: '#FFF' }}\n                    fontSize=\"large\"\n                >\n                    check\n                </Icon>\n            )}\n        </StyledColor>\n    );\n}\n\nconst StyledSelectColor = styled.div`\n    .colors {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        grid-row-gap: 5px;\n        grid-column-gap: 5px;\n        margin-top: 15px;\n    }\n\n    @media screen and (min-width: 767px) {\n        .colors {\n            grid-template-columns: repeat(6, 1fr);\n        }\n    }\n`;\n\ninterface IComponentProps {\n    label: string;\n    value: Colors;\n    onChange: (value: string) => void;\n}\n\nconst SelectColor: React.FC<IComponentProps> = ({ label, value, onChange }) => {\n\n    return (\n        <StyledSelectColor>\n            <label>{label}</label>\n\n            <div className=\"colors\">\n                {ALL_COLORS.map(color => (\n                    <Color\n                        key={color}\n                        checked={value === color}\n                        color={color}\n                        onChange={onChange}\n                    />\n                ))}\n            </div>\n        </StyledSelectColor>\n    );\n}\n\nexport default SelectColor;","const API_KEY = 'c28bad91b0aacb7cf108b4151fe8f8b7';\nconst BASE_URL_API = 'https://api.openweathermap.org/data/2.5/forecast/daily';\n\nconst WeatherRepository = {\n    getForecast: async (city: string, count: number): Promise<any> => {\n        const response = await fetch(`${BASE_URL_API}?q=${encodeURIComponent(city)}&cnt=${count}&appid=${API_KEY}`);\n        return response.json();\n    }\n}\n\nexport default WeatherRepository;","import WeatherRepository from '../infra/WeatherRepository';\n\nconst getForecast = async (city: string, days: number): Promise<number> => {\n    const response = await WeatherRepository.getForecast(city, days);\n\n    if (response.cod === '200') {\n        return response.list[response.cnt - 1].weather[0].id;\n    }\n\n    return 0;\n};\n\nexport default getForecast;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport IPlace from '../../domain/Place';\n\nfunction loadScript(src: string, position: HTMLElement | null, id: string) {\n    if (!position) {\n        return;\n    }\n\n    const script = document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('id', id);\n    script.src = src;\n    position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        color: theme.palette.text.secondary,\n        marginRight: theme.spacing(2),\n    },\n}));\n\nconst GOOGLE_API_KEY = 'AIzaSyDNIS7HDMY4mFtHBNhyKkpH_I0HYW9jXtk';\n\ninterface IComponentProps {\n    label: string;\n    initialValue: IPlace;\n    onSelect: (value: IPlace) => void;\n}\n\nconst AutoCompletePlaces: React.FC<IComponentProps> = ({ onSelect, label, initialValue }) => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState<IPlace | null>(initialValue);\n    const [inputValue, setInputValue] = React.useState('');\n    const [options, setOptions] = React.useState<IPlace[]>([]);\n    const loaded = React.useRef(false);\n\n    if (typeof window !== 'undefined' && !loaded.current) {\n        if (!document.querySelector('#google-maps')) {\n            loadScript(\n                `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}&libraries=places`,\n                document.querySelector('head'),\n                'google-maps',\n            );\n        }\n\n        loaded.current = true;\n    }\n\n    const fetch = React.useMemo(\n        () =>\n            throttle((request: { input: string }, callback: (results?: IPlace[]) => void) => {\n                (autocompleteService.current as any).getPlacePredictions(request, callback);\n            }, 200),\n        [],\n    );\n\n    React.useEffect(() => {\n        let active = true;\n\n        if (!autocompleteService.current && (window as any).google) {\n            autocompleteService.current = new (window as any).google.maps.places.AutocompleteService();\n        }\n        if (!autocompleteService.current) {\n            return undefined;\n        }\n\n        if (inputValue === '') {\n            setOptions(value ? [value] : []);\n            return undefined;\n        }\n\n        fetch({ input: inputValue }, (results?: IPlace[]) => {\n            if (active) {\n                let newOptions = [] as IPlace[];\n\n                if (value) {\n                    newOptions = [value];\n                }\n\n                if (results) {\n                    newOptions = [...newOptions, ...results];\n                }\n\n                setOptions(newOptions);\n            }\n        });\n\n        return () => {\n            active = false;\n        };\n    }, [value, inputValue, fetch]);\n\n    return (\n        <Autocomplete\n            id=\"google-map-demo\"\n            getOptionLabel={(option) => (typeof option === 'string' ? option : option.description)}\n            filterOptions={(x) => x}\n            options={options}\n            autoComplete\n            includeInputInList\n            filterSelectedOptions\n            value={value}\n            onChange={(event: any, newValue: IPlace | null) => {\n                setOptions(newValue ? [newValue, ...options] : options);\n                setValue(newValue);\n                if (newValue) onSelect(newValue);\n            }}\n            onInputChange={(event, newInputValue) => {\n                setInputValue(newInputValue);\n            }}\n            renderInput={(params) => (\n                <TextField {...params} label={label} />\n            )}\n            renderOption={(option) => {\n                const matches = option.structured_formatting.main_text_matched_substrings;\n                const parts = parse(\n                    option.structured_formatting.main_text,\n                    matches.map((match: any) => [match.offset, match.offset + match.length]),\n                );\n\n                return (\n                    <Grid container alignItems=\"center\">\n                        <Grid item>\n                            <LocationOnIcon className={classes.icon} />\n                        </Grid>\n                        <Grid item xs>\n                            {parts.map((part, index) => (\n                                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n                                    {part.text}\n                                </span>\n                            ))}\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                {option.structured_formatting.secondary_text}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                );\n            }}\n        />\n    );\n}\n\n\nexport default AutoCompletePlaces;","enum DaysOfWeek {\n    Sunday = 1,\n    Monday,\n    Tuesday,\n    Wednesday,\n    Thursday,\n    Friday,\n    Saturday,\n}\n\nexport default DaysOfWeek;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { endOfMonth, getDate } from 'date-fns/esm';\nimport getMonth from 'date-fns/getMonth';\n\nconst daysOnMonth = (date: Date): number[] => {\n    const daysQty = getDate(endOfMonth(date));\n    let days: number[] = [];\n    for (let index = 1; index <= daysQty; index++) {\n        days.push(index);\n    }\n    return days;\n};\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectDay: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const isCurrentMonth = getMonth(date) === getMonth(new Date());\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getDate(date)}\n                onChange={event => onChange(event.target.value as number)}\n            >\n                {daysOnMonth(date)\n                    .map(day => (\n                        <MenuItem\n                            disabled={isCurrentMonth && day < getDate(new Date())}\n                            key={day}\n                            value={day}\n                        >\n                            {day}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    )\n};\n\nexport default SelectDay;","import React, { ChangeEventHandler, useEffect, useState } from 'react';\nimport { Button, Container, Dialog, FormControl, TextField, Typography } from '@material-ui/core';\nimport { eachDayOfInterval, format, setDate, setHours, setMinutes, setMonth, setYear } from 'date-fns/esm';\nimport StyledCreateOrUpdateReminderModal from './StyledCreateOrUpdateReminderModal';\nimport Reminder from '../../domain/Reminder';\nimport SelectYear from '../shared/SelectYear';\nimport SelectMonth from '../shared/SelectMonth';\nimport SelectHour from '../shared/SelectHours';\nimport SelectMinutes from '../shared/SelectMinutes';\nimport StyledForm from './StyledForm';\nimport SelectColor from '../shared/SelectColor';\nimport getForecast from '../../application/getForecast';\nimport AutoCompletePlaces from '../shared/AutocompletePlaces';\nimport IPlace from '../../domain/Place';\nimport SelectDay from '../shared/SelectDay';\n\ntype updateDateFn = (date: Date, value: number) => Date;\n\ntype textFieldEvent = ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n\ninterface ComponentProps {\n    open: boolean,\n    onClose: () => void,\n    initialDate?: Date,\n    reminder?: Reminder\n};\n\nconst CreateOrUpdateReminderModal: React.FC<ComponentProps> = ({\n    open,\n    onClose,\n    initialDate,\n    reminder\n}) => {\n    let [reminderState, setReminderState] = useState(\n        reminder || new Reminder({ date: initialDate } as Reminder)\n    );\n    let [weatherCode, setWeatherCode] = useState(0);\n\n    const handleChangeDate = (fn: updateDateFn) => (newValue: number): void =>\n        setReminderState(oldState => ({\n            ...oldState,\n            date: fn(oldState.date, newValue)\n        }));\n\n    const handleChangeProperty = (property: string) =>\n        (event: React.ChangeEvent<HTMLInputElement> | string): void =>\n            setReminderState(oldState => ({\n                ...oldState,\n                [property]: typeof event === 'string' ? event : event.target.value\n            } as Reminder));\n\n    const handleChangePlace = (place: IPlace): void => {\n        setReminderState(oldState => ({\n            ...oldState,\n            city: place\n        }));\n    }\n\n    const invalidForm = reminderState.description.length > 30;\n\n    const { city, date } = reminderState;\n    const updateForecast = async () => {\n        const cityName = city.structured_formatting?.main_text;\n        const days = eachDayOfInterval({\n            start: new Date(format(new Date(), 'P')),\n            end: reminderState.date\n        }).length;\n\n        const newWeatherCode = await getForecast(cityName, days);\n        setWeatherCode(newWeatherCode);\n    };\n\n    useEffect(() => {\n        if (city.structured_formatting) updateForecast();\n    }, [city, date])\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n        >\n            <Container>\n                <StyledCreateOrUpdateReminderModal>\n                    <button\n                        className=\"close\"\n                        aria-label=\"close\"\n                        onClick={onClose}\n                    >\n                        &#10005;\n                    </button>\n                    <StyledForm noValidate autoComplete=\"off\">\n                        <FormControl className=\"description\">\n                            <TextField\n                                error={invalidForm}\n                                label=\"reminder\"\n                                value={reminderState.description}\n                                onChange={handleChangeProperty('description') as textFieldEvent}\n                                helperText=\"Max. 30 characters\"\n                            />\n                        </FormControl>\n\n                        <div className=\"year\">\n                            <SelectYear\n                                label=\"year\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setYear)}\n                            />\n                        </div>\n\n                        <div className=\"month\">\n                            <SelectMonth\n                                label=\"month\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setMonth)}\n                            />\n                        </div>\n\n                        <div className=\"date\">\n                            <SelectDay\n                                label=\"day\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setDate)}\n                            />\n                        </div>\n\n                        <div className=\"hours\">\n                            <SelectHour\n                                label=\"hour\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setHours)}\n                            />\n                        </div>\n\n                        <div className=\"minutes\">\n                            <SelectMinutes\n                                label=\"mins\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setMinutes)}\n                            />\n                        </div>\n\n                        <FormControl className=\"city\">\n                            <AutoCompletePlaces\n                                label=\"city\"\n                                initialValue={reminderState.city}\n                                onSelect={handleChangePlace}\n                            />\n                        </FormControl>\n\n                        <div className=\"forecast\">\n                            {weatherCode\n                                ? <i className={`icon wi wi-owm-${weatherCode}`}></i>\n                                : <Typography variant=\"caption\" gutterBottom>No forecast available</Typography>\n                            }\n                        </div>\n\n                        <div className=\"select-color\">\n                            <SelectColor\n                                label=\"color\"\n                                value={reminderState.color}\n                                onChange={handleChangeProperty('color')}\n                            />\n                        </div>\n\n                        <div className=\"actions\">\n                            <Button color=\"secondary\">Delete</Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={invalidForm}\n                            >\n                                Save\n                            </Button>\n                        </div>\n                    </StyledForm>\n                </StyledCreateOrUpdateReminderModal>\n            </Container>\n        </Dialog>\n    )\n}\n\nexport default CreateOrUpdateReminderModal;","import styled from 'styled-components';\n\nconst StyledCalendarHeader = styled.div`\n    background: lightgrey;\n    padding: 5px 10px;\n    text-transform: uppercase;\n    font-weight: 900;\n    text-align: center;\n\n    .controls {\n        display: none;\n        \n        button {\n            color: #FFF;\n            background: none;\n            border: none;\n            font-size: 30px;\n            font-weight: 900;\n            outline: none;\n            cursor: pointer;\n        }\n    }\n\n    @media screen and (min-width: 767px) {\n        text-align: initial;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        \n        .controls {\n            display: initial;\n        }\n    }\n`;\n\nexport default StyledCalendarHeader;","import { Icon, Typography } from '@material-ui/core';\nimport getMonth from 'date-fns/getMonth';\nimport getYear from 'date-fns/getYear';\nimport Months from '../../../enums/Months';\nimport StyledCalendarHeader from './StyledCalendarHeader';\n\ninterface IComponentProps {\n    date: Date;\n    onNext: () => void;\n    onPrevious: () => void;\n}\n\nconst CalendarHeader: React.FC<IComponentProps> = ({\n    date,\n    onNext,\n    onPrevious\n}) => {\n    return (\n        <StyledCalendarHeader>\n            <Typography\n                color=\"textSecondary\"\n                className=\"month-name\"\n                variant=\"body2\"\n            >\n                {`${Months[getMonth(date) + 1]}, ${getYear(date)}`}\n            </Typography >\n            <div className=\"controls\">\n                <button onClick={onNext}>\n                    <Icon>chevron_left</Icon>\n                </button>\n                <button onClick={onPrevious}>\n                    <Icon>chevron_right</Icon>\n                </button>\n            </div>\n        </StyledCalendarHeader>\n    );\n};\n\nexport default CalendarHeader;","import styled from 'styled-components';\n\nconst StyledCalendar = styled.div`\n`;\n\nexport default StyledCalendar;","import styled from 'styled-components';\n\nconst StyledDay = styled.div`\n    border-bottom: lightgrey 1px solid;\n    height: 90px;\n    padding: 3px;\n\n    .day-indicator {\n        font-size: 10px;\n    }\n\n    @media screen and (min-width: 767px) {\n        height: 120px;\n    }\n`;\n\nexport default StyledDay;","import getDate from 'date-fns/getDate'\nimport StyledDay from './StyledDay';\n\ninterface IComponentProps {\n    day: Date;\n}\n\nconst Day: React.FC<IComponentProps> = ({ day }) => {\n    return (\n        <StyledDay>\n            <span className=\"day-indicator\">\n                {getDate(day)}\n            </span>\n        </StyledDay>\n    )\n};\n\nexport default Day;","import styled from 'styled-components';\n\nconst StyledWeek = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n`;\n\nexport default StyledWeek;","import { addDays, format } from 'date-fns/esm';\nimport Day from '../Day/Day';\nimport StyledWeek from './StyledWeek';\n\ninterface IComponentProps {\n    initDate: Date;\n}\n\nconst Week: React.FC<IComponentProps> = ({\n    initDate\n}) => {\n    const getDays = () => {\n        const days = [];\n\n        for (let index = 0; index < 7; index++) {\n            days.push(addDays(initDate, index));\n        }\n        return days;\n    }\n\n    return (\n        <StyledWeek>\n            {getDays().map(day => (\n                <Day key={format(day, 'P')} day={day} />\n            ))}\n        </StyledWeek>\n    );\n}\n\nexport default Week;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { isSameMonth } from 'date-fns';\nimport { addDays, addMonths, format, startOfMonth, startOfWeek } from 'date-fns/esm';\nimport CalendarHeader from './CalendarHeader.tsx/CalendarHeader';\nimport StyledCalendar from './StyledCalendar';\nimport Week from './Week/Week';\nimport getKeysFromEnum from '../../helpers/getKeysFromEnum';\nimport DaysOfWeek from '../../enums/DaysOfWeek';\n\nconst StyledWeekDaysIndicator = styled.div`\n    display: flex;\n    \n    .day {\n        flex: 1;\n        font-size: 14px;\n        padding: 5px 3px;\n    }\n`;\n\nconst WeekDaysIndicator: React.FC = () => {\n    return (\n        <StyledWeekDaysIndicator>\n            {getKeysFromEnum(DaysOfWeek)\n                .map(day => DaysOfWeek[day])\n                .map(dayName => dayName.substr(0, 3))\n                .map(day => (\n                    <div key={day} className=\"day\">{day}</div>\n                ))\n            }\n        </StyledWeekDaysIndicator>\n    );\n};\n\nconst Calendar: React.FC = () => {\n    let [dateVisible, setDateVisible] = useState(new Date());\n    let [firstDayOfEachWeek, setFirstDayOfEachWeek] = useState<Date[] | null>(null);\n\n    const previousMonth = () => setDateVisible(currentState => addMonths(currentState, -1));\n    const nextMonth = () => setDateVisible(currentState => addMonths(currentState, 1));\n\n    useEffect(() => {\n        const getFirstDayOfEachWeek = () => {\n            const calendarFirstDay = startOfWeek(startOfMonth(dateVisible));\n            let day = calendarFirstDay;\n            const days = [day];\n            day = addDays(day, 7);\n\n            while (isSameMonth(day, dateVisible)) {\n                days.push(day);\n                day = addDays(day, 7);\n            };\n\n            return days;\n        };\n\n        setFirstDayOfEachWeek([...getFirstDayOfEachWeek()]);\n    }, [dateVisible]);\n\n    return (\n        <StyledCalendar>\n            <CalendarHeader\n                date={dateVisible}\n                onNext={previousMonth}\n                onPrevious={nextMonth}\n            />\n            <WeekDaysIndicator />\n            {firstDayOfEachWeek?.map(day => {\n                return (\n                    <Week key={format(day, 'P')} initDate={day} />\n                )\n            })}\n        </StyledCalendar>\n    )\n};\n\nexport default Calendar;","import { useState } from 'react';\nimport { Button, Container } from '@material-ui/core';\nimport CreateOrUpdateReminderModal from './view/createOrUpdateReminderModal/CreateOrUpdateReminderModal';\nimport Calendar from './view/calendar/Calendar';\n\nfunction App() {\n  let [reminderModalIsOpen, setReminderModalIsOpen] = useState(false);\n  let [modalInitialDate, setModalInitialDate] = useState<Date>(new Date());\n\n  const handleModal = (initialDate: Date) => () => {\n    setModalInitialDate(initialDate);\n    setReminderModalIsOpen(state => !state);\n  };\n\n  const closeModal = () => setReminderModalIsOpen(false);\n\n  return (\n    <Container>\n      <Calendar />\n      <Button\n        color=\"primary\"\n        onClick={handleModal(new Date())}\n      >\n        Add a reminder\n      </Button>\n      <CreateOrUpdateReminderModal\n        open={reminderModalIsOpen}\n        onClose={closeModal}\n        initialDate={modalInitialDate}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/css/weather-icons.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}