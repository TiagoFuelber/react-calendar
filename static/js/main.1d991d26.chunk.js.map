{"version":3,"sources":["enums/Months.ts","view/createOrUpdateReminderModal/StyledCreateOrUpdateReminderModal.tsx","domain/Reminder.ts","helpers/getTenYears.ts","view/shared/SelectYear.tsx","view/shared/SelectMonth.tsx","view/shared/SelectHours.tsx","view/shared/SelectMinutes.tsx","view/createOrUpdateReminderModal/StyledForm.tsx","view/shared/SelectColor.tsx","view/createOrUpdateReminderModal/CreateOrUpdateReminderModal.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Months","StyledCreateOrUpdateReminderModal","styled","div","ALL_COLORS","Reminder","reminder","id","description","date","color","city","this","uuidv4","getTenYears","currentYear","years","index","push","SelectYear","label","value","onChange","InputLabel","Select","event","target","getYear","Date","map","year","MenuItem","SelectMonth","Object","keys","filter","month","Number","hoursInADay","hours","SelectHour","hour","minutesInAnHour","SelectMinutes","minutes","StyledForm","form","StyledColor","Color","checked","className","onClick","Icon","style","fontSize","StyledSelectColor","SelectColor","CreateOrUpdateReminderModal","open","onClose","initialDate","useState","reminderState","setReminderState","handleChangeDate","fn","newValue","oldState","handleChangeProperty","property","invalidForm","length","Dialog","Container","aria-label","noValidate","autoComplete","FormControl","TextField","error","helperText","setYear","getMonth","setMonth","getHours","setHours","getMinutes","setMinutes","Button","variant","disabled","App","reminderModalIsOpen","setReminderModalIsOpen","modalInitialDate","setModalInitialDate","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d991d26.chunk.js","sourcesContent":["enum Months {\n    January = 1,\n    February = 2,\n    March = 3,\n    April = 4,\n    May = 5,\n    June = 6,\n    July = 7,\n    August = 8,\n    September = 9,\n    October = 10,\n    November = 11,\n    December = 12\n}\n\nexport default Months;","import styled from 'styled-components';\n\nconst StyledCreateOrUpdateReminderModal = styled.div`\n    position: 'absolute';\n    outline: 0;\n    background-color: #FFF;\n    padding: 25px 15px;\n\n    .close {\n        font-size: 18px;\n        font-weight: 900;\n        position: absolute;\n        border: none;\n        background: none;\n        right: 5px;\n        top: 8px;\n        cursor: pointer;\n    }\n\n    @media screen and (min-width: 767px) {\n        padding: 35px 15px;\n    }\n`;\n\nexport default StyledCreateOrUpdateReminderModal;","import { v4 as uuidv4 } from 'uuid';\n\nexport const ALL_COLORS = [\n    \"rgb(235, 90, 70)\",\n    \"rgb(235, 90, 0)\",\n    \"rgb(97, 189, 79)\",\n    \"rgb(242, 214, 0)\",\n    \"rgb(255, 159, 26)\",\n    \"rgb(235, 30, 10)\",\n    \"rgb(195, 119, 224)\",\n    \"rgb(0, 121, 191)\",\n    \"rgb(0, 194, 224)\",\n    \"rgb(81, 232, 152)\",\n    \"rgb(255, 120, 203)\",\n    \"rgb(179, 186, 197)\"\n] as const;\n\ntype ColorsTuple = typeof ALL_COLORS;\n\nexport type Colors = ColorsTuple[number];\n\nclass Reminder {\n    id: string;\n    description: string;\n    date: Date;\n    color: Colors;\n    city: string;\n\n    constructor(reminder: Reminder) {\n        this.id = reminder.id || uuidv4();\n        this.description = reminder.description || '';\n        this.date = reminder.date;\n        this.color = reminder.color || ALL_COLORS[0];\n        this.city = reminder.city || '';\n    }\n};\n\nexport default Reminder;","const getTenYears = (currentYear: number): number[] => {\n    let years = [];\n    for (let index = currentYear; index < currentYear + 10; index++) {\n        years.push(index);\n    }\n\n    return years;\n}\n\nexport default getTenYears;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport getYear from 'date-fns/getYear';\nimport getTenYears from '../../helpers/getTenYears';\n\ninterface IComponentProps {\n    label: string,\n    id: string,\n    value: number,\n    onChange: (value: number) => void,\n};\n\nconst SelectYear: React.FC<IComponentProps> = ({\n    label,\n    id,\n    value,\n    onChange,\n}) => (\n    <>\n        <InputLabel id={id}>{label}</InputLabel>\n        <Select\n            label={label}\n            id={id}\n            value={value}\n            onChange={event => onChange(event.target.value as number)}\n        >\n            {getTenYears(getYear(new Date())).map(year => (\n                <MenuItem key={year} value={year}>{year}</MenuItem>\n            ))}\n        </Select>\n    </>\n)\n\nexport default SelectYear;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport Months from '../../enums/Months';\n\ninterface IComponentProps {\n    label: string,\n    id: string,\n    value: number,\n    onChange: (value: number) => void\n};\n\nconst SelectMonth: React.FC<IComponentProps> = ({ label, id, value, onChange }) => (\n    <>\n        <InputLabel id={id}>{label}</InputLabel>\n        <Select\n            label={label}\n            id={id}\n            value={value}\n            onChange={event => onChange((event.target.value as number) - 1)}\n        >\n            {Object.keys(Months)\n                .filter(month => typeof Months[month as any] === 'number')\n                .map(month => Months[month as any])\n                .map(month => (\n                    <MenuItem key={month} value={month}>\n                        {Months[Number(month)]}\n                    </MenuItem>)\n                )}\n        </Select>\n    </>\n);\n\nexport default SelectMonth;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\n\nconst hoursInADay = ((): number[] => {\n    let hours: number[] = [];\n    for (let index = 1; index < 24; index++) {\n        hours.push(index);\n    }\n    return hours;\n})();\n\ninterface IComponentProps {\n    label: string,\n    id: string,\n    value: number,\n    onChange: (value: number) => void\n};\n\nconst SelectHour: React.FC<IComponentProps> = ({ label, id, value, onChange }) => (\n    <>\n        <InputLabel id={id}>{label}</InputLabel>\n        <Select\n            label={label}\n            id={id}\n            value={value}\n            onChange={event => onChange(event.target.value as number)}\n        >\n            {hoursInADay\n                .map(hour => (\n                    <MenuItem key={hour} value={hour}>\n                        {hour}\n                    </MenuItem>)\n                )}\n        </Select>\n    </>\n);\n\nexport default SelectHour;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\n\nconst minutesInAnHour = ((): number[] => {\n    let hours: number[] = [];\n    for (let index = 1; index < 60; index++) {\n        hours.push(index);\n    }\n    return hours;\n})();\n\ninterface IComponentProps {\n    label: string,\n    id: string,\n    value: number,\n    onChange: (value: number) => void\n};\n\nconst SelectMinutes: React.FC<IComponentProps> = ({ label, id, value, onChange }) => (\n    <>\n        <InputLabel id={id}>{label}</InputLabel>\n        <Select\n            label={label}\n            id={id}\n            value={value}\n            onChange={event => onChange(event.target.value as number)}\n        >\n            {minutesInAnHour\n                .map(minutes => (\n                    <MenuItem key={minutes} value={minutes}>\n                        {minutes}\n                    </MenuItem>)\n                )}\n        </Select>\n    </>\n);\n\nexport default SelectMinutes;","import styled from 'styled-components';\n\nconst StyledForm = styled.form`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-row-gap: 25px;\n    grid-column-gap: 25px;\n\n    .description, .city, .select-color, .actions {\n        grid-column: 1 / -1;\n    }\n\n    select, .MuiInputBase-root {\n        width: 100%;\n    }\n\n    .actions {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    @media screen and (min-width: 767px) {\n        grid-template-columns: repeat(4, 1fr);\n\n        .actions {\n            justify-content: flex-end;\n\n            > :first-child {\n                margin-right: 25px;\n            }\n        }\n    }\n`;\n\nexport default StyledForm;","import { Icon } from '@material-ui/core';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { ALL_COLORS, Colors } from '../../domain/Reminder';\n\ninterface IColorProps {\n    checked: boolean;\n    color: Colors;\n    onChange: (color: string) => void;\n}\n\nconst StyledColor = styled.div`\n    background-color: ${({ color }) => color};\n    width: 40px;\n    height: 40px;\n    border-radius: 5px;\n    position: relative;\n    cursor: pointer;\n    caret-color: transparent;\n\n    .icon {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    @media screen and (min-width: 767px) {\n        height: 55px;\n        width: 55px;\n    }\n`;\n\nconst Color: React.FC<IColorProps> = ({ color, checked, onChange }) => {\n    return (\n        <StyledColor className=\"color\" color={color} onClick={() => onChange(color)}>\n            {checked && (\n                <Icon\n                    className=\"icon\"\n                    style={{ color: '#FFF' }}\n                    fontSize=\"large\"\n                >\n                    check\n                </Icon>\n            )}\n        </StyledColor>\n    );\n}\n\nconst StyledSelectColor = styled.div`\n    .colors {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        grid-row-gap: 5px;\n        grid-column-gap: 5px;\n        margin-top: 15px;\n    }\n\n    @media screen and (min-width: 767px) {\n        .colors {\n            grid-template-columns: repeat(6, 1fr);\n        }\n    }\n`;\n\ninterface IComponentProps {\n    label: string;\n    value: Colors;\n    onChange: (value: string) => void;\n}\n\nconst SelectColor: React.FC<IComponentProps> = ({ label, value, onChange }) => {\n\n    return (\n        <StyledSelectColor>\n            <label>{label}</label>\n\n            <div className=\"colors\">\n                {ALL_COLORS.map(color => (\n                    <Color\n                        checked={value === color}\n                        color={color}\n                        onChange={onChange}\n                    />\n                ))}\n            </div>\n        </StyledSelectColor>\n    );\n}\n\nexport default SelectColor;","import React, { ChangeEventHandler, useState } from 'react';\nimport { Button, Container, Dialog, FormControl, TextField } from '@material-ui/core';\nimport getYear from 'date-fns/getYear';\nimport getMonth from 'date-fns/getMonth';\nimport { getHours, getMinutes, setHours, setMinutes, setMonth, setYear } from 'date-fns/esm';\nimport StyledCreateOrUpdateReminderModal from './StyledCreateOrUpdateReminderModal';\nimport Reminder from '../../domain/Reminder';\nimport SelectYear from '../shared/SelectYear';\nimport SelectMonth from '../shared/SelectMonth';\nimport SelectHour from '../shared/SelectHours';\nimport SelectMinutes from '../shared/SelectMinutes';\nimport StyledForm from './StyledForm';\nimport SelectColor from '../shared/SelectColor';\n\ntype updateDateFn = (date: Date, value: number) => Date;\n\ntype textFieldEvent = ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n\ninterface ComponentProps {\n    open: boolean,\n    onClose: () => void,\n    initialDate?: Date,\n    reminder?: Reminder\n};\n\nconst CreateOrUpdateReminderModal: React.FC<ComponentProps> = ({\n    open,\n    onClose,\n    initialDate,\n    reminder\n}) => {\n    let [reminderState, setReminderState] = useState(\n        reminder || new Reminder({ date: initialDate } as Reminder)\n    );\n\n\n    const handleChangeDate = (fn: updateDateFn) => (newValue: number): void =>\n        setReminderState(oldState => ({\n            ...oldState,\n            date: fn(oldState.date, newValue)\n        }));\n\n    const handleChangeProperty = (property: string) => (event: React.ChangeEvent<HTMLInputElement> | string): void =>\n        setReminderState(oldState => ({\n            ...oldState,\n            [property]: typeof event === 'string' ? event : event.target.value\n        } as Reminder));\n\n    const invalidForm = reminderState.description.length > 30;\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n        >\n            <Container>\n                <StyledCreateOrUpdateReminderModal>\n                    <button\n                        className=\"close\"\n                        aria-label=\"close\"\n                        onClick={onClose}\n                    >\n                        &#10005;\n                    </button>\n                    <StyledForm noValidate autoComplete=\"off\">\n                        <FormControl className=\"description\">\n                            <TextField\n                                error={invalidForm}\n                                id=\"description\"\n                                label=\"reminder\"\n                                value={reminderState.description}\n                                onChange={handleChangeProperty('description') as textFieldEvent}\n                                helperText=\"Max. 30 characters\"\n                            />\n                        </FormControl>\n\n                        <div className=\"year\">\n                            <SelectYear\n                                label=\"year\"\n                                id=\"year\"\n                                value={getYear(reminderState.date)}\n                                onChange={handleChangeDate(setYear)}\n                            />\n                        </div>\n\n                        <div className=\"month\">\n                            <SelectMonth\n                                label=\"month\"\n                                id=\"month\"\n                                value={getMonth(reminderState.date) + 1}\n                                onChange={handleChangeDate(setMonth)}\n                            />\n                        </div>\n\n                        <div className=\"hours\">\n                            <SelectHour\n                                label=\"hour\"\n                                id=\"hour\"\n                                value={getHours(reminderState.date)}\n                                onChange={handleChangeDate(setHours)}\n                            />\n                        </div>\n\n                        <div className=\"minutes\">\n                            <SelectMinutes\n                                label=\"mins\"\n                                id=\"minutes\"\n                                value={getMinutes(reminderState.date)}\n                                onChange={handleChangeDate(setMinutes)}\n                            />\n                        </div>\n\n                        <FormControl className=\"city\">\n                            <TextField\n                                id=\"city\"\n                                label=\"city\"\n                                value={reminderState.city}\n                                onChange={handleChangeProperty('city') as textFieldEvent}\n                            />\n                        </FormControl>\n\n                        <div className=\"select-color\">\n                            <SelectColor\n                                label=\"color\"\n                                value={reminderState.color}\n                                onChange={handleChangeProperty('color')}\n                            />\n                        </div>\n\n                        <div className=\"actions\">\n                            <Button color=\"secondary\">Delete</Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={invalidForm}\n                            >\n                                Save\n                            </Button>\n                        </div>\n                    </StyledForm>\n                </StyledCreateOrUpdateReminderModal>\n            </Container>\n        </Dialog>\n    )\n}\n\nexport default CreateOrUpdateReminderModal;","import { useState } from 'react';\nimport { Button, Container } from '@material-ui/core';\nimport CreateOrUpdateReminderModal from './view/createOrUpdateReminderModal/CreateOrUpdateReminderModal';\n\nfunction App() {\n  let [reminderModalIsOpen, setReminderModalIsOpen] = useState(false);\n  let [modalInitialDate, setModalInitialDate] = useState<Date>(new Date());\n\n  const handleModal = (initialDate: Date) => () => {\n    setModalInitialDate(initialDate);\n    setReminderModalIsOpen(state => !state);\n  };\n\n  const closeModal = () => setReminderModalIsOpen(false);\n\n  return (\n    <Container>\n      <Button\n        color=\"primary\"\n        onClick={handleModal(new Date())}\n      >\n        Add a reminder\n      </Button>\n      <CreateOrUpdateReminderModal\n        open={reminderModalIsOpen}\n        onClose={closeModal}\n        initialDate={modalInitialDate}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}