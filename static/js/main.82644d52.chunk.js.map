{"version":3,"sources":["enums/Months.ts","state/RemindersProvider.tsx","view/calendar/CalendarHeader.tsx/StyledCalendarHeader.tsx","view/calendar/CalendarHeader.tsx/CalendarHeader.tsx","view/calendar/StyledCalendar.tsx","view/createOrUpdateReminderModal/StyledCreateOrUpdateReminderModal.tsx","domain/Reminder.ts","helpers/getTenYears.ts","view/shared/SelectYear.tsx","helpers/getKeysFromEnum.ts","view/shared/SelectMonth.tsx","view/shared/SelectHours.tsx","view/shared/SelectMinutes.tsx","view/createOrUpdateReminderModal/StyledForm.tsx","view/shared/SelectColor.tsx","infra/WeatherRepository.tsx","application/getForecast.tsx","view/shared/AutocompletePlaces.tsx","enums/DaysOfWeek.ts","view/shared/SelectDay.tsx","application/reminder/addReminder.ts","application/reminder/deleteReminder.ts","view/createOrUpdateReminderModal/CreateOrUpdateReminderModal.tsx","view/calendar/Day/StyledDay.tsx","view/reminderCard/StyledReminderCard.tsx","view/reminderCard/ReminderCard.tsx","helpers/isMobile.ts","helpers/sortByTime.ts","view/calendar/Day/Day.tsx","view/calendar/Week/StyledWeek.tsx","view/calendar/Week/Week.tsx","view/calendar/Calendar.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Months","RemindersContext","createContext","RemindersProvider","children","useState","reminders","setReminders","Provider","value","StyledCalendarHeader","styled","div","CalendarHeader","date","onNext","onPrevious","Typography","color","className","variant","getMonth","getYear","onClick","Icon","StyledCalendar","StyledCreateOrUpdateReminderModal","ALL_COLORS","Reminder","reminder","id","description","city","this","uuidv4","getTenYears","currentYear","years","index","push","SelectYear","label","onChange","InputLabel","Select","event","target","Date","map","year","MenuItem","getKeysFromEnum","e","Object","keys","filter","key","SelectMonth","months","month","Number","hoursInADay","hours","SelectHour","isToday","isSameDay","getHours","hour","disabled","minutesInAnHour","SelectMinutes","isNow","getMinutes","minutes","toLocaleString","minimumIntegerDigits","useGrouping","StyledForm","form","StyledColor","Color","checked","style","fontSize","StyledSelectColor","SelectColor","WeatherRepository","getForecast","count","a","fetch","encodeURIComponent","process","response","json","days","cod","list","cnt","weather","DaysOfWeek","autocompleteService","current","useStyles","makeStyles","theme","icon","palette","text","secondary","marginRight","spacing","AutoCompletePlaces","onSelect","initialValue","classes","React","setValue","inputValue","setInputValue","options","setOptions","loaded","useRef","window","document","querySelector","src","position","script","createElement","setAttribute","appendChild","loadScript","useMemo","throttle","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","input","results","newOptions","Autocomplete","getOptionLabel","option","filterOptions","x","autoComplete","includeInputInList","filterSelectedOptions","newValue","onInputChange","newInputValue","renderInput","params","TextField","renderOption","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","match","offset","length","Grid","container","alignItems","item","xs","part","fontWeight","highlight","secondary_text","daysOnMonth","daysQty","getDate","endOfMonth","SelectDay","isCurrentMonth","day","addReminder","setReminder","oldState","deleteReminder","CreateOrUpdateReminderModal","onClose","initialDate","reminderState","setReminderState","weatherCode","setWeatherCode","useContext","handleChangeDate","fn","handleChangeProperty","property","invalidForm","updateForecast","cityName","eachDayOfInterval","start","format","end","newWeatherCode","close","Dialog","open","stopPropagation","data-testid","Container","aria-label","noValidate","FormControl","error","helperText","autoFocus","setYear","setMonth","setDate","setHours","setMinutes","place","gutterBottom","Button","StyledDay","StyledReminderCard","ReminderCard","reminderModalIsOpen","setReminderModalIsOpen","isMobile","innerWidth","sortByTime","b","getTime","Day","isBefore","modalInitialDate","remindersVisible","sort","i","StyledWeek","Week","initDate","addDays","getDays","StyledWeekDaysIndicator","WeekDaysIndicator","dayName","substr","Calendar","dateVisible","setDateVisible","firstDayOfEachWeek","setFirstDayOfEachWeek","startOfWeek","startOfMonth","isSameMonth","getFirstDayOfEachWeek","currentState","addMonths","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.82644d52.chunk.js","sourcesContent":["enum Months {\n    January = 1,\n    February,\n    March,\n    April,\n    May,\n    June,\n    July,\n    August,\n    September,\n    October,\n    November,\n    December\n}\n\nexport default Months;","import { createContext, Dispatch, SetStateAction, useState } from 'react';\nimport Reminder from '../domain/Reminder';\n\ntype state = [Reminder[], Dispatch<SetStateAction<Reminder[]>>];\n\ninterface IComponentProps {\n    children: React.ReactNode\n}\n\nexport const RemindersContext = createContext<state>([[], () => { }]);\n\nconst RemindersProvider: React.FC<IComponentProps> = ({ children }) => {\n    let [reminders, setReminders] = useState<Reminder[]>([]);\n\n    return (\n        <RemindersContext.Provider value={[reminders, setReminders]}>\n            {children}\n        </RemindersContext.Provider>\n    )\n}\n\nexport default RemindersProvider;\n","import styled from 'styled-components';\n\nconst StyledCalendarHeader = styled.div`\n    background: lightgrey;\n    padding: 5px 10px;\n    text-transform: uppercase;\n    font-weight: 900;\n    text-align: center;\n\n    .controls {\n        display: none;\n        \n        button {\n            color: #FFF;\n            background: none;\n            border: none;\n            font-size: 30px;\n            font-weight: 900;\n            outline: none;\n            cursor: pointer;\n        }\n    }\n\n    @media screen and (min-width: 767px) {\n        text-align: initial;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        \n        .controls {\n            display: initial;\n        }\n    }\n`;\n\nexport default StyledCalendarHeader;","import { Icon, Typography } from '@material-ui/core';\nimport getMonth from 'date-fns/getMonth';\nimport getYear from 'date-fns/getYear';\nimport Months from '../../../enums/Months';\nimport StyledCalendarHeader from './StyledCalendarHeader';\n\ninterface IComponentProps {\n    date: Date;\n    onNext: () => void;\n    onPrevious: () => void;\n}\n\nconst CalendarHeader: React.FC<IComponentProps> = ({\n    date,\n    onNext,\n    onPrevious\n}) => {\n    return (\n        <StyledCalendarHeader>\n            <Typography\n                color=\"textSecondary\"\n                className=\"month-name\"\n                variant=\"body2\"\n            >\n                {`${Months[getMonth(date) + 1]}, ${getYear(date)}`}\n            </Typography >\n            <div className=\"controls\">\n                <button onClick={onNext}>\n                    <Icon>chevron_left</Icon>\n                </button>\n                <button onClick={onPrevious}>\n                    <Icon>chevron_right</Icon>\n                </button>\n            </div>\n        </StyledCalendarHeader>\n    );\n};\n\nexport default CalendarHeader;","import styled from 'styled-components';\n\nconst StyledCalendar = styled.div`\n`;\n\nexport default StyledCalendar;","import styled from 'styled-components';\n\nconst StyledCreateOrUpdateReminderModal = styled.div`\n    position: 'absolute';\n    outline: 0;\n    background-color: #FFF;\n    padding: 25px 15px;\n\n    .close {\n        font-size: 18px;\n        font-weight: 900;\n        position: absolute;\n        border: none;\n        background: none;\n        right: 5px;\n        top: 8px;\n        cursor: pointer;\n    }\n\n    @media screen and (min-width: 767px) {\n        padding: 35px 15px;\n    }\n`;\n\nexport default StyledCreateOrUpdateReminderModal;","import { v4 as uuidv4 } from 'uuid';\nimport IPlace from './Place';\n\nexport const ALL_COLORS = [\n    \"rgb(235, 90, 70)\",\n    \"rgb(235, 90, 0)\",\n    \"rgb(97, 189, 79)\",\n    \"rgb(242, 214, 0)\",\n    \"rgb(255, 159, 26)\",\n    \"rgb(235, 30, 10)\",\n    \"rgb(195, 119, 224)\",\n    \"rgb(0, 121, 191)\",\n    \"rgb(0, 194, 224)\",\n    \"rgb(81, 232, 152)\",\n    \"rgb(255, 120, 203)\",\n    \"rgb(179, 186, 197)\"\n] as const;\n\ntype ColorsTuple = typeof ALL_COLORS;\n\nexport type Colors = ColorsTuple[number];\n\nclass Reminder {\n    id: string;\n    description: string;\n    date: Date;\n    color: Colors;\n    city: IPlace;\n\n    constructor(reminder: Reminder) {\n        this.id = reminder.id || uuidv4();\n        this.description = reminder.description || '';\n        this.date = reminder.date;\n        this.color = reminder.color || ALL_COLORS[0];\n        this.city = reminder.city || {};\n    }\n};\n\nexport default Reminder;","const getTenYears = (currentYear: number): number[] => {\n    let years = [];\n    for (let index = currentYear; index < currentYear + 10; index++) {\n        years.push(index);\n    }\n\n    return years;\n}\n\nexport default getTenYears;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport getYear from 'date-fns/getYear';\nimport getTenYears from '../../helpers/getTenYears';\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void,\n};\n\nconst SelectYear: React.FC<IComponentProps> = ({\n    label,\n    date,\n    onChange,\n}) => (\n    <>\n        <InputLabel>{label}</InputLabel>\n        <Select\n            label={label}\n            value={getYear(date)}\n            onChange={event => onChange(event.target.value as number)}\n        >\n            {getTenYears(getYear(new Date())).map(year => (\n                <MenuItem key={year} value={year}>{year}</MenuItem>\n            ))}\n        </Select>\n    </>\n)\n\nexport default SelectYear;","import Enum from './Enum';\n\nconst getKeysFromEnum = (e: Enum): number[] => Object.keys(e)\n    .filter(key => typeof e[key as any] === 'number')\n    .map(key => e[key as any] as number);\n\nexport default getKeysFromEnum;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport getMonth from 'date-fns/getMonth';\nimport Enum from '../../helpers/Enum';\nimport Months from '../../enums/Months';\nimport getKeysFromEnum from '../../helpers/getKeysFromEnum';\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectMonth: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const months = getKeysFromEnum(Months as Enum)\n        .filter(month => month >= getMonth(new Date()));\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getMonth(date) + 1}\n                onChange={event => onChange((event.target.value as number) - 1)}\n            >\n                {months\n                    .map(month => (\n                        <MenuItem key={month} value={month}>\n                            {Months[Number(month)]}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    )\n};\n\nexport default SelectMonth;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { getHours, isSameDay } from 'date-fns';\n\nconst hoursInADay = ((): number[] => {\n    let hours: number[] = [];\n    for (let index = 1; index < 24; index++) {\n        hours.push(index);\n    }\n    return hours;\n})();\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectHour: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const isToday = isSameDay(date, new Date());\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getHours(date)}\n                onChange={event => onChange(event.target.value as number)}\n            >\n                {hoursInADay\n                    .map(hour => (\n                        <MenuItem\n                            key={hour}\n                            value={hour}\n                            disabled={isToday && hour < getHours(new Date())}\n                        >\n                            {hour}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    );\n};\n\nexport default SelectHour;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { getMinutes, isSameDay } from 'date-fns';\nimport getHours from 'date-fns/getHours';\n\nconst minutesInAnHour = ((): number[] => {\n    let hours: number[] = [];\n    for (let index = 0; index < 60; index++) {\n        hours.push(index);\n    }\n    return hours;\n})();\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectMinutes: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const isNow = isSameDay(date, new Date()) && getHours(date) === getHours(new Date());\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getMinutes(date)}\n                onChange={event => onChange(event.target.value as number)}\n            >\n                {minutesInAnHour\n                    .map(minutes => (\n                        <MenuItem\n                            key={minutes}\n                            value={minutes}\n                            disabled={isNow && minutes < getMinutes(new Date())}\n                        >\n                            {minutes.toLocaleString('en-US', {\n                                minimumIntegerDigits: 2,\n                                useGrouping: false\n                            })}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    );\n};\n\nexport default SelectMinutes;","import styled from 'styled-components';\n\nconst StyledForm = styled.form`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-row-gap: 25px;\n    grid-column-gap: 25px;\n\n    .description,\n    .year, \n    .city, \n    .select-color, \n    .actions,\n    .forecast {\n        grid-column: 1 / -1;\n    }\n\n    select, .MuiInputBase-root {\n        width: 100%;\n    }\n\n    .actions {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .forecast {\n        display: flex;\n        justify-content: center;\n        caret-color: transparent;\n        background: lightcyan;\n        border-radius: 5px;\n        padding: 20px;\n\n        .icon.wi {\n            color: grey;\n            font-size: 35px;\n        }\n    }\n\n    @media screen and (min-width: 767px) {\n        grid-template-columns: repeat(3, 1fr);\n\n        .year {\n            grid-column: auto;\n        }\n\n        .actions {\n            justify-content: flex-end;\n\n            > :not(:last-child) {\n                margin-right: 25px;\n            }\n        }\n    }\n`;\n\nexport default StyledForm;","import { Icon } from '@material-ui/core';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { ALL_COLORS, Colors } from '../../domain/Reminder';\n\ninterface IColorProps {\n    checked: boolean;\n    color: Colors;\n    onChange: (color: string) => void;\n}\n\nconst StyledColor = styled.div`\n    background-color: ${({ color }) => color};\n    width: 40px;\n    height: 40px;\n    border-radius: 5px;\n    position: relative;\n    cursor: pointer;\n    caret-color: transparent;\n\n    .icon {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    @media screen and (min-width: 767px) {\n        height: 55px;\n        width: 55px;\n    }\n`;\n\nconst Color: React.FC<IColorProps> = ({ color, checked, onChange }) => {\n    return (\n        <StyledColor className=\"color\" color={color} onClick={() => onChange(color)}>\n            {checked && (\n                <Icon\n                    className=\"icon\"\n                    style={{ color: '#FFF' }}\n                    fontSize=\"large\"\n                >\n                    check\n                </Icon>\n            )}\n        </StyledColor>\n    );\n}\n\nconst StyledSelectColor = styled.div`\n    .colors {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        grid-row-gap: 5px;\n        grid-column-gap: 5px;\n        margin-top: 15px;\n    }\n\n    @media screen and (min-width: 767px) {\n        .colors {\n            grid-template-columns: repeat(6, 1fr);\n        }\n    }\n`;\n\ninterface IComponentProps {\n    label: string;\n    value: Colors;\n    onChange: (value: string) => void;\n}\n\nconst SelectColor: React.FC<IComponentProps> = ({ label, value, onChange }) => {\n\n    return (\n        <StyledSelectColor>\n            <label>{label}</label>\n\n            <div className=\"colors\">\n                {ALL_COLORS.map(color => (\n                    <Color\n                        key={color}\n                        checked={value === color}\n                        color={color}\n                        onChange={onChange}\n                    />\n                ))}\n            </div>\n        </StyledSelectColor>\n    );\n}\n\nexport default SelectColor;","const BASE_URL_API = 'https://api.openweathermap.org/data/2.5/forecast/daily';\n\nconst WeatherRepository = {\n    getForecast: async (city: string, count: number): Promise<any> => {\n        const response = await fetch(`${BASE_URL_API}?q=${encodeURIComponent(city)}&cnt=${count}&appid=${process.env.REACT_APP_AUTH_TOKEN}`);\n        return response.json();\n    }\n}\n\nexport default WeatherRepository;","import WeatherRepository from '../infra/WeatherRepository';\n\nconst getForecast = async (city: string, days: number): Promise<number> => {\n    const response = await WeatherRepository.getForecast(city, days);\n\n    if (response.cod === '200') {\n        return response.list[response.cnt - 1].weather[0].id;\n    }\n\n    return 0;\n};\n\nexport default getForecast;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport IPlace from '../../domain/Place';\n\nfunction loadScript(src: string, position: HTMLElement | null, id: string) {\n    if (!position) {\n        return;\n    }\n\n    const script = document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('id', id);\n    script.src = src;\n    position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        color: theme.palette.text.secondary,\n        marginRight: theme.spacing(2),\n    },\n}));\n\nconst GOOGLE_API_KEY = 'AIzaSyDNIS7HDMY4mFtHBNhyKkpH_I0HYW9jXtk';\n\ninterface IComponentProps {\n    label: string;\n    initialValue: IPlace;\n    onSelect: (value: IPlace) => void;\n}\n\nconst AutoCompletePlaces: React.FC<IComponentProps> = ({ onSelect, label, initialValue }) => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState<IPlace | null>(initialValue);\n    const [inputValue, setInputValue] = React.useState('');\n    const [options, setOptions] = React.useState<IPlace[]>([]);\n    const loaded = React.useRef(false);\n\n    if (typeof window !== 'undefined' && !loaded.current) {\n        if (!document.querySelector('#google-maps')) {\n            loadScript(\n                `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}&libraries=places`,\n                document.querySelector('head'),\n                'google-maps',\n            );\n        }\n\n        loaded.current = true;\n    }\n\n    const fetch = React.useMemo(\n        () =>\n            throttle((request: { input: string }, callback: (results?: IPlace[]) => void) => {\n                (autocompleteService.current as any).getPlacePredictions(request, callback);\n            }, 200),\n        [],\n    );\n\n    React.useEffect(() => {\n        let active = true;\n\n        if (!autocompleteService.current && (window as any).google) {\n            autocompleteService.current = new (window as any).google.maps.places.AutocompleteService();\n        }\n        if (!autocompleteService.current) {\n            return undefined;\n        }\n\n        if (inputValue === '') {\n            setOptions(value ? [value] : []);\n            return undefined;\n        }\n\n        fetch({ input: inputValue }, (results?: IPlace[]) => {\n            if (active) {\n                let newOptions = [] as IPlace[];\n\n                if (value) {\n                    newOptions = [value];\n                }\n\n                if (results) {\n                    newOptions = [...newOptions, ...results];\n                }\n\n                setOptions(newOptions);\n            }\n        });\n\n        return () => {\n            active = false;\n        };\n    }, [value, inputValue, fetch]);\n\n    return (\n        <Autocomplete\n            id=\"google-map-demo\"\n            getOptionLabel={(option) => (typeof option === 'string' ? option : option.description)}\n            filterOptions={(x) => x}\n            options={options}\n            autoComplete\n            includeInputInList\n            filterSelectedOptions\n            value={value}\n            onChange={(event: any, newValue: IPlace | null) => {\n                setOptions(newValue ? [newValue, ...options] : options);\n                setValue(newValue);\n                if (newValue) onSelect(newValue);\n            }}\n            onInputChange={(event, newInputValue) => {\n                setInputValue(newInputValue);\n            }}\n            renderInput={(params) => (\n                <TextField {...params} label={label} />\n            )}\n            renderOption={(option) => {\n                const matches = option.structured_formatting.main_text_matched_substrings;\n                const parts = parse(\n                    option.structured_formatting.main_text,\n                    matches.map((match: any) => [match.offset, match.offset + match.length]),\n                );\n\n                return (\n                    <Grid container alignItems=\"center\">\n                        <Grid item>\n                            <LocationOnIcon className={classes.icon} />\n                        </Grid>\n                        <Grid item xs>\n                            {parts.map((part, index) => (\n                                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n                                    {part.text}\n                                </span>\n                            ))}\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                {option.structured_formatting.secondary_text}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                );\n            }}\n        />\n    );\n}\n\n\nexport default AutoCompletePlaces;","enum DaysOfWeek {\n    Sunday = 1,\n    Monday,\n    Tuesday,\n    Wednesday,\n    Thursday,\n    Friday,\n    Saturday,\n}\n\nexport default DaysOfWeek;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { endOfMonth, getDate } from 'date-fns';\nimport getMonth from 'date-fns/getMonth';\n\nconst daysOnMonth = (date: Date): number[] => {\n    const daysQty = getDate(endOfMonth(date));\n    let days: number[] = [];\n    for (let index = 1; index <= daysQty; index++) {\n        days.push(index);\n    }\n    return days;\n};\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectDay: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const isCurrentMonth = getMonth(date) === getMonth(new Date());\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getDate(date)}\n                onChange={event => onChange(event.target.value as number)}\n            >\n                {daysOnMonth(date)\n                    .map(day => (\n                        <MenuItem\n                            disabled={isCurrentMonth && day < getDate(new Date())}\n                            key={day}\n                            value={day}\n                        >\n                            {day}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    )\n};\n\nexport default SelectDay;","import { Dispatch, SetStateAction } from 'react';\nimport Reminder from '../../domain/Reminder';\n\nconst addReminder = (\n    reminder: Reminder,\n    setReminder: Dispatch<SetStateAction<Reminder[]>>\n): void => {\n    setReminder(oldState => ([\n        ...oldState.filter(item => item.id !== reminder.id),\n        reminder\n    ]))\n}\n\nexport default addReminder;","import { Dispatch, SetStateAction } from 'react';\nimport Reminder from '../../domain/Reminder';\n\nconst deleteReminder = (\n    reminder: Reminder,\n    setReminders: Dispatch<SetStateAction<Reminder[]>>\n): void => {\n    setReminders(oldState => ([\n        ...oldState.filter(item => item.id !== reminder?.id)\n    ]))\n}\n\nexport default deleteReminder;","import React, { ChangeEventHandler, useContext, useEffect, useState } from 'react';\nimport { Button, Container, Dialog, FormControl, TextField, Typography } from '@material-ui/core';\nimport { eachDayOfInterval, format, setDate, setHours, setMinutes, setMonth, setYear } from 'date-fns';\nimport StyledCreateOrUpdateReminderModal from './StyledCreateOrUpdateReminderModal';\nimport Reminder from '../../domain/Reminder';\nimport SelectYear from '../shared/SelectYear';\nimport SelectMonth from '../shared/SelectMonth';\nimport SelectHour from '../shared/SelectHours';\nimport SelectMinutes from '../shared/SelectMinutes';\nimport StyledForm from './StyledForm';\nimport SelectColor from '../shared/SelectColor';\nimport getForecast from '../../application/getForecast';\nimport AutoCompletePlaces from '../shared/AutocompletePlaces';\nimport IPlace from '../../domain/Place';\nimport SelectDay from '../shared/SelectDay';\nimport { RemindersContext } from '../../state/RemindersProvider';\nimport addReminder from '../../application/reminder/addReminder';\nimport deleteReminder from '../../application/reminder/deleteReminder';\n\ntype updateDateFn = (date: Date, value: number) => Date;\n\ntype textFieldEvent = ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n\ninterface ComponentProps {\n    onClose: () => void,\n    initialDate?: Date,\n    reminder?: Reminder,\n};\n\nconst CreateOrUpdateReminderModal: React.FC<ComponentProps> = ({\n    onClose,\n    initialDate,\n    reminder,\n}) => {\n    let [reminderState, setReminderState] = useState(\n        reminder || new Reminder({ date: initialDate } as Reminder)\n    );\n    let [weatherCode, setWeatherCode] = useState(0);\n    let [, setReminders] = useContext(RemindersContext);\n\n    const handleChangeDate = (fn: updateDateFn) => (newValue: number): void =>\n        setReminderState(oldState => ({\n            ...oldState,\n            date: fn(oldState.date, newValue)\n        }));\n\n    const handleChangeProperty = (property: string) =>\n        (event: React.ChangeEvent<HTMLInputElement> | string): void =>\n            setReminderState(oldState => ({\n                ...oldState,\n                [property]: typeof event === 'string' ? event : event.target.value\n            } as Reminder));\n\n    const handleChangePlace = (place: IPlace): void => {\n        setReminderState(oldState => ({\n            ...oldState,\n            city: place\n        }));\n    }\n\n    const invalidForm = reminderState.description.length > 30;\n\n    const { city, date } = reminderState;\n    const updateForecast = async () => {\n        const cityName = city.structured_formatting?.main_text;\n        const days = eachDayOfInterval({\n            start: new Date(format(new Date(), 'P')),\n            end: reminderState.date\n        }).length;\n\n        const newWeatherCode = await getForecast(cityName, days);\n        setWeatherCode(newWeatherCode);\n    };\n\n    const close = () => {\n        setReminderState(new Reminder({ date: initialDate } as Reminder));\n        onClose();\n    }\n\n    const save = () => {\n        addReminder(reminderState, setReminders);\n        close();\n    };\n\n    const delReminder = () => {\n        deleteReminder(reminderState, setReminders);\n        close();\n    }\n\n    useEffect(() => {\n        if (city.structured_formatting) updateForecast();\n    }, [city, date])\n\n    return (\n        <Dialog\n            open={true}\n            onClose={close}\n            onClick={e => e.stopPropagation()}\n            data-testid=\"dialog\"\n        >\n            <Container>\n                <StyledCreateOrUpdateReminderModal>\n                    <button\n                        className=\"close\"\n                        aria-label=\"close\"\n                        onClick={onClose}\n                    >\n                        &#10005;\n                    </button>\n                    <StyledForm noValidate autoComplete=\"off\">\n                        <FormControl\n                            className=\"description\"\n                        >\n                            <TextField\n                                error={invalidForm}\n                                id=\"reminder\"\n                                label=\"reminder\"\n                                value={reminderState.description}\n                                onChange={handleChangeProperty('description') as textFieldEvent}\n                                helperText=\"Max. 30 characters\"\n                                autoFocus\n                            />\n                        </FormControl>\n\n                        <div className=\"year\">\n                            <SelectYear\n                                label=\"year\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setYear)}\n                            />\n                        </div>\n\n                        <div className=\"month\">\n                            <SelectMonth\n                                label=\"month\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setMonth)}\n                            />\n                        </div>\n\n                        <div className=\"date\">\n                            <SelectDay\n                                label=\"day\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setDate)}\n                            />\n                        </div>\n\n                        <div className=\"hours\">\n                            <SelectHour\n                                label=\"hour\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setHours)}\n                            />\n                        </div>\n\n                        <div className=\"minutes\">\n                            <SelectMinutes\n                                label=\"mins\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setMinutes)}\n                            />\n                        </div>\n\n                        <FormControl className=\"city\">\n                            <AutoCompletePlaces\n                                label=\"city\"\n                                initialValue={reminderState.city}\n                                onSelect={handleChangePlace}\n                            />\n                        </FormControl>\n\n                        <div className=\"forecast\">\n                            {weatherCode\n                                ? <i className={`icon wi wi-owm-${weatherCode}`}></i>\n                                : <Typography variant=\"caption\" gutterBottom>No forecast available</Typography>\n                            }\n                        </div>\n\n                        <div className=\"select-color\">\n                            <SelectColor\n                                label=\"color\"\n                                value={reminderState.color}\n                                onChange={handleChangeProperty('color')}\n                            />\n                        </div>\n\n                        <div className=\"actions\">\n                            <Button onClick={close} color=\"default\">Cancel</Button>\n                            {reminder ? (\n                                <Button onClick={delReminder} color=\"secondary\">Delete</Button>\n                            ) : null}\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={invalidForm}\n                                onClick={save}\n                                data-testid=\"save\"\n                            >\n                                Save\n                            </Button>\n                        </div>\n                    </StyledForm>\n                </StyledCreateOrUpdateReminderModal>\n            </Container>\n        </Dialog>\n    )\n}\n\nexport default CreateOrUpdateReminderModal;","import styled from 'styled-components';\n\nconst StyledDay = styled.div`\n    border-bottom: lightgrey 1px solid;\n    height: 90px;\n    padding: 3px;\n    position: relative;\n    cursor: pointer;\n\n    .day-indicator {\n        font-size: 10px;\n    }\n\n    .reminders {\n        display: grid;\n        grid-row-gap: 3px;\n        margin-top: 3px;\n    }\n\n    .more-items {\n        font-size: 10px;\n        text-align: right;\n    }\n\n    .disabled {\n        position: absolute;\n        height: 100%;\n        width: 100%;\n        background: rgba(0, 0, 0, .1);\n    }\n\n    @media screen and (min-width: 767px) {\n        height: 120px;\n    }\n`;\n\nexport default StyledDay;","import styled from 'styled-components';\n\nconst StyledReminderCard = styled.div`\n    font-size: 10px;\n    padding: 3px;\n    background-color: ${({ color }) => color};\n    border-radius: 3px;\n    color: #FFF;\n    white-space: nowrap;\n    overflow: hidden;\n    cursor: pointer;\n\n    @media screen and (min-width: 767px) {\n        font-size: 12px;\n        padding: 3px 7px;\n    }\n`;\n\nexport default StyledReminderCard;","import { SyntheticEvent, useState } from 'react';\nimport Reminder from '../../domain/Reminder';\nimport CreateOrUpdateReminderModal from '../createOrUpdateReminderModal/CreateOrUpdateReminderModal';\nimport StyledReminderCard from './StyledReminderCard';\n\ninterface IComponentProps {\n    reminder: Reminder;\n}\n\nconst ReminderCard: React.FC<IComponentProps> = ({ reminder }) => {\n    let [reminderModalIsOpen, setReminderModalIsOpen] = useState(false);\n\n    const openModal = (event: SyntheticEvent) => {\n        event.stopPropagation();\n        setReminderModalIsOpen(true);\n    };\n\n    const closeModal = () => setReminderModalIsOpen(false);\n\n    return (\n        <>\n            <StyledReminderCard\n                className=\"reminder-card\"\n                color={reminder.color}\n                onClick={openModal}\n            >\n                {reminder.description}\n            </StyledReminderCard>\n            {reminderModalIsOpen\n                ? (\n                    <CreateOrUpdateReminderModal\n                        onClose={closeModal}\n                        reminder={reminder}\n                    />\n                )\n                : null}\n        </>\n    );\n}\n\nexport default ReminderCard;","const isMobile = () => window.innerWidth < 767;\n\nexport default isMobile;","import Reminder from '../domain/Reminder';\n\nconst sortByTime = (a: Reminder, b: Reminder) =>\n    a.date.getTime() - b.date.getTime();\n\nexport default sortByTime;","import { SyntheticEvent, useState } from 'react';\nimport { format, isBefore } from 'date-fns';\nimport getDate from 'date-fns/getDate'\nimport CreateOrUpdateReminderModal from '../../createOrUpdateReminderModal/CreateOrUpdateReminderModal';\nimport StyledDay from './StyledDay';\nimport Reminder from '../../../domain/Reminder';\nimport ReminderCard from '../../reminderCard/ReminderCard';\nimport isMobile from '../../../helpers/isMobile';\nimport sortByTime from '../../../helpers/sortByTime';\n\ninterface IComponentProps {\n    day: Date;\n    reminders: Reminder[]\n}\n\nconst Day: React.FC<IComponentProps> = ({ day, reminders }) => {\n    let [reminderModalIsOpen, setReminderModalIsOpen] = useState(false);\n    let [modalInitialDate] = useState<Date>(isBefore(day, new Date()) ? new Date() : day);\n\n    const openModal = (event: SyntheticEvent) => {\n        event.stopPropagation();\n        setReminderModalIsOpen(true);\n    };\n\n    const closeModal = () => setReminderModalIsOpen(false);\n\n    const REMINDERS_VISIBLE_MOBILE = 2;\n    const REMINDERS_VISIBLE_DESKTOP = 3;\n    const remindersVisible = isMobile()\n        ? REMINDERS_VISIBLE_MOBILE\n        : REMINDERS_VISIBLE_DESKTOP;\n\n    return (\n        <>\n            <StyledDay data-testid={format(day, 'P')} onClick={openModal}>\n                <span className=\"day-indicator\">\n                    {getDate(day)}\n                </span>\n\n                <div className=\"reminders\">\n                    {reminders\n                        .sort(sortByTime)\n                        .filter((reminder, i) => i < remindersVisible)\n                        .map(reminder => (\n                            <ReminderCard reminder={reminder} />\n                        ))}\n                </div>\n\n                {reminders.length > remindersVisible\n                    ? (\n                        <div className=\"more-items\">\n                            {`+ ${reminders.length - remindersVisible}`}\n                        </div>\n                    )\n                    : null}\n            </StyledDay>\n            {reminderModalIsOpen\n                ? (\n                    <CreateOrUpdateReminderModal\n                        onClose={closeModal}\n                        initialDate={modalInitialDate}\n                    />\n                )\n                : null}\n        </>\n    )\n};\n\nexport default Day;","import styled from 'styled-components';\n\nconst StyledWeek = styled.div`\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n`;\n\nexport default StyledWeek;","import { addDays, format, isSameDay } from 'date-fns';\nimport { useContext } from 'react';\nimport { RemindersContext } from '../../../state/RemindersProvider';\nimport Day from '../Day/Day';\nimport StyledWeek from './StyledWeek';\n\ninterface IComponentProps {\n    initDate: Date;\n}\n\nconst Week: React.FC<IComponentProps> = ({\n    initDate\n}) => {\n    let [reminders] = useContext(RemindersContext);\n    const getDays = () => {\n        const days = [];\n\n        for (let index = 0; index < 7; index++) {\n            days.push(addDays(initDate, index));\n        }\n        return days;\n    }\n\n    return (\n        <StyledWeek>\n            {getDays().map(day => (\n                <Day\n                    key={format(day, 'P')}\n                    day={day}\n                    reminders={reminders.filter(reminder => isSameDay(day, reminder.date))}\n                />\n            ))}\n        </StyledWeek>\n    );\n}\n\nexport default Week;","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { isSameMonth } from 'date-fns';\nimport { addDays, addMonths, format, startOfMonth, startOfWeek } from 'date-fns';\nimport CalendarHeader from './CalendarHeader.tsx/CalendarHeader';\nimport StyledCalendar from './StyledCalendar';\nimport Week from './Week/Week';\nimport getKeysFromEnum from '../../helpers/getKeysFromEnum';\nimport DaysOfWeek from '../../enums/DaysOfWeek';\n\nconst StyledWeekDaysIndicator = styled.div`\n    display: flex;\n    \n    .day {\n        flex: 1;\n        font-size: 14px;\n        padding: 5px 3px;\n    }\n`;\n\nconst WeekDaysIndicator: React.FC = () => {\n    return (\n        <StyledWeekDaysIndicator>\n            {getKeysFromEnum(DaysOfWeek)\n                .map(day => DaysOfWeek[day])\n                .map(dayName => dayName.substr(0, 3))\n                .map(day => (\n                    <div key={day} className=\"day\">{day}</div>\n                ))\n            }\n        </StyledWeekDaysIndicator>\n    );\n};\n\nconst Calendar: React.FC = () => {\n    let [dateVisible, setDateVisible] = useState(new Date());\n    let [firstDayOfEachWeek, setFirstDayOfEachWeek] = useState<Date[] | null>(null);\n    const previousMonth = () => setDateVisible(currentState => addMonths(currentState, -1));\n    const nextMonth = () => setDateVisible(currentState => addMonths(currentState, 1));\n\n    useEffect(() => {\n        const getFirstDayOfEachWeek = () => {\n            const calendarFirstDay = startOfWeek(startOfMonth(dateVisible));\n            let day = calendarFirstDay;\n            const days = [day];\n            day = addDays(day, 7);\n\n            while (isSameMonth(day, dateVisible)) {\n                days.push(day);\n                day = addDays(day, 7);\n            };\n\n            return days;\n        };\n\n        setFirstDayOfEachWeek([...getFirstDayOfEachWeek()]);\n    }, [dateVisible]);\n\n    return (\n        <StyledCalendar>\n            <CalendarHeader\n                date={dateVisible}\n                onNext={previousMonth}\n                onPrevious={nextMonth}\n            />\n            <WeekDaysIndicator />\n            {firstDayOfEachWeek?.map(day => {\n                return (\n                    <Week key={format(day, 'P')} initDate={day} />\n                )\n            })}\n        </StyledCalendar>\n    )\n};\n\nexport default Calendar;","import { Container } from '@material-ui/core';\nimport RemindersProvider from './state/RemindersProvider';\nimport Calendar from './view/calendar/Calendar';\nfunction App() {\n\n\n  return (\n    <RemindersProvider>\n      <Container>\n        <Calendar />\n      </Container>\n    </RemindersProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/css/weather-icons.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}