{"version":3,"sources":["enums/Months.ts","view/createOrUpdateReminderModal/StyledCreateOrUpdateReminderModal.tsx","domain/Reminder.ts","helpers/getTenYears.ts","view/shared/SelectYear.tsx","view/shared/SelectMonth.tsx","view/shared/SelectHours.tsx","view/shared/SelectMinutes.tsx","view/createOrUpdateReminderModal/StyledForm.tsx","view/shared/SelectColor.tsx","infra/WeatherRepository.tsx","application/getForecast.tsx","view/shared/AutocompletePlaces.tsx","view/shared/SelectDay.tsx","view/createOrUpdateReminderModal/CreateOrUpdateReminderModal.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Months","StyledCreateOrUpdateReminderModal","styled","div","ALL_COLORS","Reminder","reminder","id","description","date","color","city","this","uuidv4","getTenYears","currentYear","years","index","push","SelectYear","label","onChange","InputLabel","Select","value","getYear","event","target","Date","map","year","MenuItem","SelectMonth","months","Object","keys","filter","month","parseInt","getMonth","Number","hoursInADay","hours","SelectHour","isToday","isSameDay","getHours","hour","disabled","minutesInAnHour","SelectMinutes","isNow","getMinutes","minutes","StyledForm","form","StyledColor","Color","checked","className","onClick","Icon","style","fontSize","StyledSelectColor","SelectColor","WeatherRepository","getForecast","count","a","fetch","encodeURIComponent","response","json","days","cod","list","cnt","weather","autocompleteService","current","useStyles","makeStyles","theme","icon","palette","text","secondary","marginRight","spacing","AutoCompletePlaces","onSelect","initialValue","classes","React","useState","setValue","inputValue","setInputValue","options","setOptions","loaded","useRef","window","document","querySelector","src","position","script","createElement","setAttribute","appendChild","loadScript","useMemo","throttle","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","input","results","newOptions","Autocomplete","getOptionLabel","option","filterOptions","x","autoComplete","includeInputInList","filterSelectedOptions","newValue","onInputChange","newInputValue","renderInput","params","TextField","renderOption","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","match","offset","length","Grid","container","alignItems","item","xs","part","fontWeight","highlight","Typography","variant","secondary_text","daysOnMonth","daysQty","getDate","endOfMonth","SelectDay","isCurrentMonth","day","CreateOrUpdateReminderModal","open","onClose","initialDate","reminderState","setReminderState","weatherCode","setWeatherCode","handleChangeDate","fn","oldState","handleChangeProperty","property","invalidForm","updateForecast","cityName","eachDayOfInterval","start","format","end","newWeatherCode","Dialog","Container","aria-label","noValidate","FormControl","error","helperText","setYear","setMonth","setDate","setHours","setMinutes","place","gutterBottom","Button","App","reminderModalIsOpen","setReminderModalIsOpen","modalInitialDate","setModalInitialDate","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b862bf55.chunk.js","sourcesContent":["enum Months {\n    January = 1,\n    February = 2,\n    March = 3,\n    April = 4,\n    May = 5,\n    June = 6,\n    July = 7,\n    August = 8,\n    September = 9,\n    October = 10,\n    November = 11,\n    December = 12\n}\n\nexport default Months;","import styled from 'styled-components';\n\nconst StyledCreateOrUpdateReminderModal = styled.div`\n    position: 'absolute';\n    outline: 0;\n    background-color: #FFF;\n    padding: 25px 15px;\n\n    .close {\n        font-size: 18px;\n        font-weight: 900;\n        position: absolute;\n        border: none;\n        background: none;\n        right: 5px;\n        top: 8px;\n        cursor: pointer;\n    }\n\n    @media screen and (min-width: 767px) {\n        padding: 35px 15px;\n    }\n`;\n\nexport default StyledCreateOrUpdateReminderModal;","import { v4 as uuidv4 } from 'uuid';\nimport IPlace from './Place';\n\nexport const ALL_COLORS = [\n    \"rgb(235, 90, 70)\",\n    \"rgb(235, 90, 0)\",\n    \"rgb(97, 189, 79)\",\n    \"rgb(242, 214, 0)\",\n    \"rgb(255, 159, 26)\",\n    \"rgb(235, 30, 10)\",\n    \"rgb(195, 119, 224)\",\n    \"rgb(0, 121, 191)\",\n    \"rgb(0, 194, 224)\",\n    \"rgb(81, 232, 152)\",\n    \"rgb(255, 120, 203)\",\n    \"rgb(179, 186, 197)\"\n] as const;\n\ntype ColorsTuple = typeof ALL_COLORS;\n\nexport type Colors = ColorsTuple[number];\n\nclass Reminder {\n    id: string;\n    description: string;\n    date: Date;\n    color: Colors;\n    city: IPlace;\n\n    constructor(reminder: Reminder) {\n        this.id = reminder.id || uuidv4();\n        this.description = reminder.description || '';\n        this.date = reminder.date;\n        this.color = reminder.color || ALL_COLORS[0];\n        this.city = reminder.city || {};\n    }\n};\n\nexport default Reminder;","const getTenYears = (currentYear: number): number[] => {\n    let years = [];\n    for (let index = currentYear; index < currentYear + 10; index++) {\n        years.push(index);\n    }\n\n    return years;\n}\n\nexport default getTenYears;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport getYear from 'date-fns/getYear';\nimport getTenYears from '../../helpers/getTenYears';\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void,\n};\n\nconst SelectYear: React.FC<IComponentProps> = ({\n    label,\n    date,\n    onChange,\n}) => (\n    <>\n        <InputLabel>{label}</InputLabel>\n        <Select\n            label={label}\n            value={getYear(date)}\n            onChange={event => onChange(event.target.value as number)}\n        >\n            {getTenYears(getYear(new Date())).map(year => (\n                <MenuItem key={year} value={year}>{year}</MenuItem>\n            ))}\n        </Select>\n    </>\n)\n\nexport default SelectYear;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport getMonth from 'date-fns/getMonth';\nimport Months from '../../enums/Months';\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectMonth: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const months = Object.keys(Months)\n        .filter(month => typeof Months[month as any] === 'number')\n        .map(month => Months[month as any])\n        .filter(month => parseInt(month) >= getMonth(new Date()));\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getMonth(date) + 1}\n                onChange={event => onChange((event.target.value as number) - 1)}\n            >\n                {months\n                    .map(month => (\n                        <MenuItem key={month} value={month}>\n                            {Months[Number(month)]}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    )\n};\n\nexport default SelectMonth;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { getHours, isSameDay } from 'date-fns/esm';\n\nconst hoursInADay = ((): number[] => {\n    let hours: number[] = [];\n    for (let index = 1; index < 24; index++) {\n        hours.push(index);\n    }\n    return hours;\n})();\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectHour: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const isToday = isSameDay(date, new Date());\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getHours(date)}\n                onChange={event => onChange(event.target.value as number)}\n            >\n                {hoursInADay\n                    .map(hour => (\n                        <MenuItem\n                            key={hour}\n                            value={hour}\n                            disabled={isToday && hour < getHours(new Date())}\n                        >\n                            {hour}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    );\n};\n\nexport default SelectHour;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { getMinutes, isSameDay } from 'date-fns/esm';\nimport getHours from 'date-fns/getHours';\n\nconst minutesInAnHour = ((): number[] => {\n    let hours: number[] = [];\n    for (let index = 1; index < 60; index++) {\n        hours.push(index);\n    }\n    return hours;\n})();\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectMinutes: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const isNow = isSameDay(date, new Date()) && getHours(date) === getHours(new Date());\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getMinutes(date)}\n                onChange={event => onChange(event.target.value as number)}\n            >\n                {minutesInAnHour\n                    .map(minutes => (\n                        <MenuItem\n                            key={minutes}\n                            value={minutes}\n                            disabled={isNow && minutes < getMinutes(new Date())}\n                        >\n                            {minutes}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    );\n};\n\nexport default SelectMinutes;","import styled from 'styled-components';\n\nconst StyledForm = styled.form`\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    grid-row-gap: 25px;\n    grid-column-gap: 25px;\n\n    .description,\n    .year, \n    .city, \n    .select-color, \n    .actions,\n    .forecast {\n        grid-column: 1 / -1;\n    }\n\n    select, .MuiInputBase-root {\n        width: 100%;\n    }\n\n    .actions {\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .forecast {\n        display: flex;\n        justify-content: center;\n        caret-color: transparent;\n        background: lightcyan;\n        border-radius: 5px;\n        padding: 20px;\n\n        .icon.wi {\n            color: grey;\n            font-size: 35px;\n        }\n    }\n\n    @media screen and (min-width: 767px) {\n        grid-template-columns: repeat(3, 1fr);\n\n        .year {\n            grid-column: auto;\n        }\n\n        .actions {\n            justify-content: flex-end;\n\n            > :first-child {\n                margin-right: 25px;\n            }\n        }\n    }\n`;\n\nexport default StyledForm;","import { Icon } from '@material-ui/core';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { ALL_COLORS, Colors } from '../../domain/Reminder';\n\ninterface IColorProps {\n    checked: boolean;\n    color: Colors;\n    onChange: (color: string) => void;\n}\n\nconst StyledColor = styled.div`\n    background-color: ${({ color }) => color};\n    width: 40px;\n    height: 40px;\n    border-radius: 5px;\n    position: relative;\n    cursor: pointer;\n    caret-color: transparent;\n\n    .icon {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n    }\n\n    @media screen and (min-width: 767px) {\n        height: 55px;\n        width: 55px;\n    }\n`;\n\nconst Color: React.FC<IColorProps> = ({ color, checked, onChange }) => {\n    return (\n        <StyledColor className=\"color\" color={color} onClick={() => onChange(color)}>\n            {checked && (\n                <Icon\n                    className=\"icon\"\n                    style={{ color: '#FFF' }}\n                    fontSize=\"large\"\n                >\n                    check\n                </Icon>\n            )}\n        </StyledColor>\n    );\n}\n\nconst StyledSelectColor = styled.div`\n    .colors {\n        display: grid;\n        grid-template-columns: repeat(4, 1fr);\n        grid-row-gap: 5px;\n        grid-column-gap: 5px;\n        margin-top: 15px;\n    }\n\n    @media screen and (min-width: 767px) {\n        .colors {\n            grid-template-columns: repeat(6, 1fr);\n        }\n    }\n`;\n\ninterface IComponentProps {\n    label: string;\n    value: Colors;\n    onChange: (value: string) => void;\n}\n\nconst SelectColor: React.FC<IComponentProps> = ({ label, value, onChange }) => {\n\n    return (\n        <StyledSelectColor>\n            <label>{label}</label>\n\n            <div className=\"colors\">\n                {ALL_COLORS.map(color => (\n                    <Color\n                        key={color}\n                        checked={value === color}\n                        color={color}\n                        onChange={onChange}\n                    />\n                ))}\n            </div>\n        </StyledSelectColor>\n    );\n}\n\nexport default SelectColor;","const API_KEY = 'c28bad91b0aacb7cf108b4151fe8f8b7';\nconst BASE_URL_API = 'https://api.openweathermap.org/data/2.5/forecast/daily';\n\nconst WeatherRepository = {\n    getForecast: async (city: string, count: number): Promise<any> => {\n        const response = await fetch(`${BASE_URL_API}?q=${encodeURIComponent(city)}&cnt=${count}&appid=${API_KEY}`);\n        return response.json();\n    }\n}\n\nexport default WeatherRepository;","import WeatherRepository from '../infra/WeatherRepository';\n\nconst getForecast = async (city: string, days: number): Promise<number> => {\n    const response = await WeatherRepository.getForecast(city, days);\n\n    if (response.cod === '200') {\n        return response.list[response.cnt - 1].weather[0].id;\n    }\n\n    return 0;\n};\n\nexport default getForecast;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport parse from 'autosuggest-highlight/parse';\nimport throttle from 'lodash/throttle';\nimport IPlace from '../../domain/Place';\n\nfunction loadScript(src: string, position: HTMLElement | null, id: string) {\n    if (!position) {\n        return;\n    }\n\n    const script = document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('id', id);\n    script.src = src;\n    position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        color: theme.palette.text.secondary,\n        marginRight: theme.spacing(2),\n    },\n}));\n\nconst GOOGLE_API_KEY = 'AIzaSyDNIS7HDMY4mFtHBNhyKkpH_I0HYW9jXtk';\n\ninterface IComponentProps {\n    label: string;\n    initialValue: IPlace;\n    onSelect: (value: IPlace) => void;\n}\n\nconst AutoCompletePlaces: React.FC<IComponentProps> = ({ onSelect, label, initialValue }) => {\n    const classes = useStyles();\n    const [value, setValue] = React.useState<IPlace | null>(initialValue);\n    const [inputValue, setInputValue] = React.useState('');\n    const [options, setOptions] = React.useState<IPlace[]>([]);\n    const loaded = React.useRef(false);\n\n    if (typeof window !== 'undefined' && !loaded.current) {\n        if (!document.querySelector('#google-maps')) {\n            loadScript(\n                `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}&libraries=places`,\n                document.querySelector('head'),\n                'google-maps',\n            );\n        }\n\n        loaded.current = true;\n    }\n\n    const fetch = React.useMemo(\n        () =>\n            throttle((request: { input: string }, callback: (results?: IPlace[]) => void) => {\n                (autocompleteService.current as any).getPlacePredictions(request, callback);\n            }, 200),\n        [],\n    );\n\n    React.useEffect(() => {\n        let active = true;\n\n        if (!autocompleteService.current && (window as any).google) {\n            autocompleteService.current = new (window as any).google.maps.places.AutocompleteService();\n        }\n        if (!autocompleteService.current) {\n            return undefined;\n        }\n\n        if (inputValue === '') {\n            setOptions(value ? [value] : []);\n            return undefined;\n        }\n\n        fetch({ input: inputValue }, (results?: IPlace[]) => {\n            if (active) {\n                let newOptions = [] as IPlace[];\n\n                if (value) {\n                    newOptions = [value];\n                }\n\n                if (results) {\n                    newOptions = [...newOptions, ...results];\n                }\n\n                setOptions(newOptions);\n            }\n        });\n\n        return () => {\n            active = false;\n        };\n    }, [value, inputValue, fetch]);\n\n    return (\n        <Autocomplete\n            id=\"google-map-demo\"\n            getOptionLabel={(option) => (typeof option === 'string' ? option : option.description)}\n            filterOptions={(x) => x}\n            options={options}\n            autoComplete\n            includeInputInList\n            filterSelectedOptions\n            value={value}\n            onChange={(event: any, newValue: IPlace | null) => {\n                setOptions(newValue ? [newValue, ...options] : options);\n                setValue(newValue);\n                if (newValue) onSelect(newValue);\n            }}\n            onInputChange={(event, newInputValue) => {\n                setInputValue(newInputValue);\n            }}\n            renderInput={(params) => (\n                <TextField {...params} label={label} />\n            )}\n            renderOption={(option) => {\n                const matches = option.structured_formatting.main_text_matched_substrings;\n                const parts = parse(\n                    option.structured_formatting.main_text,\n                    matches.map((match: any) => [match.offset, match.offset + match.length]),\n                );\n\n                return (\n                    <Grid container alignItems=\"center\">\n                        <Grid item>\n                            <LocationOnIcon className={classes.icon} />\n                        </Grid>\n                        <Grid item xs>\n                            {parts.map((part, index) => (\n                                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\n                                    {part.text}\n                                </span>\n                            ))}\n                            <Typography variant=\"body2\" color=\"textSecondary\">\n                                {option.structured_formatting.secondary_text}\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                );\n            }}\n        />\n    );\n}\n\n\nexport default AutoCompletePlaces;","import { InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { endOfMonth, getDate } from 'date-fns/esm';\nimport getMonth from 'date-fns/getMonth';\n\nconst daysOnMonth = (date: Date): number[] => {\n    const daysQty = getDate(endOfMonth(date));\n    let days: number[] = [];\n    for (let index = 1; index <= daysQty; index++) {\n        days.push(index);\n    }\n    return days;\n};\n\ninterface IComponentProps {\n    label: string,\n    date: Date,\n    onChange: (value: number) => void\n};\n\nconst SelectDay: React.FC<IComponentProps> = ({ label, date, onChange }) => {\n    const isCurrentMonth = getMonth(date) === getMonth(new Date());\n\n    return (\n        <>\n            <InputLabel>{label}</InputLabel>\n            <Select\n                label={label}\n                value={getDate(date)}\n                onChange={event => onChange(event.target.value as number)}\n            >\n                {daysOnMonth(date)\n                    .map(day => (\n                        <MenuItem\n                            disabled={isCurrentMonth && day < getDate(new Date())}\n                            key={day}\n                            value={day}\n                        >\n                            {day}\n                        </MenuItem>)\n                    )}\n            </Select>\n        </>\n    )\n};\n\nexport default SelectDay;","import React, { ChangeEventHandler, useEffect, useState } from 'react';\nimport { Button, Container, Dialog, FormControl, TextField, Typography } from '@material-ui/core';\nimport { eachDayOfInterval, format, setDate, setHours, setMinutes, setMonth, setYear } from 'date-fns/esm';\nimport StyledCreateOrUpdateReminderModal from './StyledCreateOrUpdateReminderModal';\nimport Reminder from '../../domain/Reminder';\nimport SelectYear from '../shared/SelectYear';\nimport SelectMonth from '../shared/SelectMonth';\nimport SelectHour from '../shared/SelectHours';\nimport SelectMinutes from '../shared/SelectMinutes';\nimport StyledForm from './StyledForm';\nimport SelectColor from '../shared/SelectColor';\nimport getForecast from '../../application/getForecast';\nimport AutoCompletePlaces from '../shared/AutocompletePlaces';\nimport IPlace from '../../domain/Place';\nimport SelectDay from '../shared/SelectDay';\n\ntype updateDateFn = (date: Date, value: number) => Date;\n\ntype textFieldEvent = ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n\ninterface ComponentProps {\n    open: boolean,\n    onClose: () => void,\n    initialDate?: Date,\n    reminder?: Reminder\n};\n\nconst CreateOrUpdateReminderModal: React.FC<ComponentProps> = ({\n    open,\n    onClose,\n    initialDate,\n    reminder\n}) => {\n    let [reminderState, setReminderState] = useState(\n        reminder || new Reminder({ date: initialDate } as Reminder)\n    );\n    let [weatherCode, setWeatherCode] = useState(0);\n\n    const handleChangeDate = (fn: updateDateFn) => (newValue: number): void =>\n        setReminderState(oldState => ({\n            ...oldState,\n            date: fn(oldState.date, newValue)\n        }));\n\n    const handleChangeProperty = (property: string) =>\n        (event: React.ChangeEvent<HTMLInputElement> | string): void =>\n            setReminderState(oldState => ({\n                ...oldState,\n                [property]: typeof event === 'string' ? event : event.target.value\n            } as Reminder));\n\n    const handleChangePlace = (place: IPlace): void => {\n        setReminderState(oldState => ({\n            ...oldState,\n            city: place\n        }));\n    }\n\n    const invalidForm = reminderState.description.length > 30;\n\n    const { city, date } = reminderState;\n\n    const updateForecast = async () => {\n        const cityName = city.structured_formatting?.main_text;\n        const days = eachDayOfInterval({\n            start: new Date(format(new Date(), 'P')),\n            end: reminderState.date\n        }).length;\n\n        const newWeatherCode = await getForecast(cityName, days);\n        setWeatherCode(newWeatherCode);\n    };\n\n    useEffect(() => {\n        if (city.structured_formatting) updateForecast();\n    }, [city, date])\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n        >\n            <Container>\n                <StyledCreateOrUpdateReminderModal>\n                    <button\n                        className=\"close\"\n                        aria-label=\"close\"\n                        onClick={onClose}\n                    >\n                        &#10005;\n                    </button>\n                    <StyledForm noValidate autoComplete=\"off\">\n                        <FormControl className=\"description\">\n                            <TextField\n                                error={invalidForm}\n                                label=\"reminder\"\n                                value={reminderState.description}\n                                onChange={handleChangeProperty('description') as textFieldEvent}\n                                helperText=\"Max. 30 characters\"\n                            />\n                        </FormControl>\n\n                        <div className=\"year\">\n                            <SelectYear\n                                label=\"year\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setYear)}\n                            />\n                        </div>\n\n                        <div className=\"month\">\n                            <SelectMonth\n                                label=\"month\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setMonth)}\n                            />\n                        </div>\n\n                        <div className=\"date\">\n                            <SelectDay\n                                label=\"day\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setDate)}\n                            />\n                        </div>\n\n                        <div className=\"hours\">\n                            <SelectHour\n                                label=\"hour\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setHours)}\n                            />\n                        </div>\n\n                        <div className=\"minutes\">\n                            <SelectMinutes\n                                label=\"mins\"\n                                date={reminderState.date}\n                                onChange={handleChangeDate(setMinutes)}\n                            />\n                        </div>\n\n                        <FormControl className=\"city\">\n                            <AutoCompletePlaces\n                                label=\"city\"\n                                initialValue={reminderState.city}\n                                onSelect={handleChangePlace}\n                            />\n                        </FormControl>\n\n                        <div className=\"forecast\">\n                            {weatherCode\n                                ? <i className={`icon wi wi-owm-${weatherCode}`}></i>\n                                : <Typography variant=\"caption\" gutterBottom>No forecast available</Typography>\n                            }\n                        </div>\n\n                        <div className=\"select-color\">\n                            <SelectColor\n                                label=\"color\"\n                                value={reminderState.color}\n                                onChange={handleChangeProperty('color')}\n                            />\n                        </div>\n\n                        <div className=\"actions\">\n                            <Button color=\"secondary\">Delete</Button>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={invalidForm}\n                            >\n                                Save\n                            </Button>\n                        </div>\n                    </StyledForm>\n                </StyledCreateOrUpdateReminderModal>\n            </Container>\n        </Dialog>\n    )\n}\n\nexport default CreateOrUpdateReminderModal;","import { useState } from 'react';\nimport { Button, Container } from '@material-ui/core';\nimport CreateOrUpdateReminderModal from './view/createOrUpdateReminderModal/CreateOrUpdateReminderModal';\n\nfunction App() {\n  let [reminderModalIsOpen, setReminderModalIsOpen] = useState(false);\n  let [modalInitialDate, setModalInitialDate] = useState<Date>(new Date());\n\n  const handleModal = (initialDate: Date) => () => {\n    setModalInitialDate(initialDate);\n    setReminderModalIsOpen(state => !state);\n  };\n\n  const closeModal = () => setReminderModalIsOpen(false);\n\n  return (\n    <Container>\n      <Button\n        color=\"primary\"\n        onClick={handleModal(new Date())}\n      >\n        Add a reminder\n      </Button>\n      <CreateOrUpdateReminderModal\n        open={reminderModalIsOpen}\n        onClose={closeModal}\n        initialDate={modalInitialDate}\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/css/weather-icons.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}